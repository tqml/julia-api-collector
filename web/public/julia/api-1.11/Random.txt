bitrand(dims::Integer...)
bitrand(dims::NTuple{N, Int64} where N)
bitrand(r::AbstractRNG, dims::Integer...)
bitrand(r::AbstractRNG, dims::NTuple{N, Int64} where N)
default_rng()
default_rng(tid::Int64)
rand!(A::AbstractArray{T}) where T
rand!(A::AbstractArray{T}, ::Type{X}) where {T, X}
rand!(A::AbstractArray{T}, X) where T
rand!(r::MersenneTwister, A1::Array{Bool}, sp::Random.SamplerType{Bool})
rand!(r::MersenneTwister, A::AbstractArray{Float64}, I::Random.SamplerTrivial{<:Random.FloatInterval{Float64}})
rand!(r::MersenneTwister, A::Array{Float16}, ::Random.SamplerTrivial{Random.CloseOpen01{Float16}})
rand!(r::MersenneTwister, A::Array{Float16}, ::Random.SamplerTrivial{Random.CloseOpen12{Float16}})
rand!(r::MersenneTwister, A::Array{Float32}, ::Random.SamplerTrivial{Random.CloseOpen01{Float32}})
rand!(r::MersenneTwister, A::Array{Float32}, ::Random.SamplerTrivial{Random.CloseOpen12{Float32}})
rand!(r::MersenneTwister, A::Array{Float64}, I::Random.SamplerTrivial{<:Random.FloatInterval{Float64}})
rand!(r::MersenneTwister, A::Array{Int128}, sp::Random.SamplerType{Int128})
rand!(r::MersenneTwister, A::Array{Int16}, sp::Random.SamplerType{Int16})
rand!(r::MersenneTwister, A::Array{Int32}, sp::Random.SamplerType{Int32})
rand!(r::MersenneTwister, A::Array{Int64}, sp::Random.SamplerType{Int64})
rand!(r::MersenneTwister, A::Array{Int8}, sp::Random.SamplerType{Int8})
rand!(r::MersenneTwister, A::Array{UInt128}, sp::Random.SamplerType{UInt128})
rand!(r::MersenneTwister, A::Array{UInt16}, sp::Random.SamplerType{UInt16})
rand!(r::MersenneTwister, A::Array{UInt32}, sp::Random.SamplerType{UInt32})
rand!(r::MersenneTwister, A::Array{UInt64}, sp::Random.SamplerType{UInt64})
rand!(r::MersenneTwister, A::Array{UInt8}, sp::Random.SamplerType{UInt8})
rand!(r::MersenneTwister, A::Random.UnsafeView{Float64}, I::Random.SamplerTrivial{<:Random.FloatInterval{Float64}})
rand!(r::MersenneTwister, A::Random.UnsafeView{Int128}, ::Random.SamplerType{Int128})
rand!(r::MersenneTwister, A::Random.UnsafeView{Int16}, ::Random.SamplerType{Int16})
rand!(r::MersenneTwister, A::Random.UnsafeView{Int32}, ::Random.SamplerType{Int32})
rand!(r::MersenneTwister, A::Random.UnsafeView{Int64}, ::Random.SamplerType{Int64})
rand!(r::MersenneTwister, A::Random.UnsafeView{Int8}, ::Random.SamplerType{Int8})
rand!(r::MersenneTwister, A::Random.UnsafeView{UInt128}, ::Random.SamplerType{UInt128})
rand!(r::MersenneTwister, A::Random.UnsafeView{UInt16}, ::Random.SamplerType{UInt16})
rand!(r::MersenneTwister, A::Random.UnsafeView{UInt32}, ::Random.SamplerType{UInt32})
rand!(r::MersenneTwister, A::Random.UnsafeView{UInt64}, ::Random.SamplerType{UInt64})
rand!(r::MersenneTwister, A::Random.UnsafeView{UInt8}, ::Random.SamplerType{UInt8})
rand!(rd::RandomDevice, A::Array{Bool}, ::Random.SamplerType{Bool})
rand!(rd::RandomDevice, A::Array{Int128}, ::Random.SamplerType{Int128})
rand!(rd::RandomDevice, A::Array{Int16}, ::Random.SamplerType{Int16})
rand!(rd::RandomDevice, A::Array{Int32}, ::Random.SamplerType{Int32})
rand!(rd::RandomDevice, A::Array{Int64}, ::Random.SamplerType{Int64})
rand!(rd::RandomDevice, A::Array{Int8}, ::Random.SamplerType{Int8})
rand!(rd::RandomDevice, A::Array{UInt128}, ::Random.SamplerType{UInt128})
rand!(rd::RandomDevice, A::Array{UInt16}, ::Random.SamplerType{UInt16})
rand!(rd::RandomDevice, A::Array{UInt32}, ::Random.SamplerType{UInt32})
rand!(rd::RandomDevice, A::Array{UInt64}, ::Random.SamplerType{UInt64})
rand!(rd::RandomDevice, A::Array{UInt8}, ::Random.SamplerType{UInt8})
rand!(rng::AbstractRNG, A::AbstractArray{T}) where T
rand!(rng::AbstractRNG, A::AbstractArray{T}, ::Type{X}) where {T, X}
rand!(rng::AbstractRNG, A::AbstractArray{T}, X) where T
rand!(rng::AbstractRNG, A::AbstractArray{T}, sp::Random.Sampler) where T
rand!(rng::AbstractRNG, B::BitArray, ::Random.SamplerType{Bool})
rand!(rng::AbstractRNG, x::BigInt, sp::Random.SamplerBigInt)
rand!(rng::AbstractRNG, z::BigFloat, sp::Random.SamplerBigFloat{T}) where T<:Random.FloatInterval{BigFloat}
randcycle!(a::Array{<:Integer})
randcycle!(r::AbstractRNG, a::Array{<:Integer})
randcycle(n::Integer)
randcycle(r::AbstractRNG, n::T) where T<:Integer
randexp!(A::AbstractArray)
randexp!(rng::AbstractRNG, A::AbstractArray{T}) where T
randexp!(rng::MersenneTwister, A::Array{Float64})
randexp!(rng::Union{TaskLocalRNG, Xoshiro}, A::Array{Float64})
randexp()
randexp(::Type{T}) where T
randexp(::Type{T}, dims::Integer...) where T
randexp(::Type{T}, dims::NTuple{N, Int64} where N) where T
randexp(dims::Integer...)
randexp(dims::NTuple{N, Int64} where N)
randexp(rng::AbstractRNG)
randexp(rng::AbstractRNG, ::Type{T}) where T<:AbstractFloat
randexp(rng::AbstractRNG, ::Type{T}, dim1::Integer, dims::Integer...) where T
randexp(rng::AbstractRNG, ::Type{T}, dims::NTuple{N, Int64} where N) where T
randexp(rng::AbstractRNG, T::Union{Type{Float16}, Type{Float32}, Type{Float64}})
randexp(rng::AbstractRNG, dims::Integer...)
randexp(rng::AbstractRNG, dims::NTuple{N, Int64} where N)
randn!(A::AbstractArray)
randn!(rng::AbstractRNG, A::AbstractArray{T}) where T
randn!(rng::MersenneTwister, A::Array{Float64})
randn!(rng::Union{TaskLocalRNG, Xoshiro}, A::Array{Float64})
randperm!(a::Array{<:Integer})
randperm!(r::AbstractRNG, a::Array{<:Integer})
randperm(n::Integer)
randperm(r::AbstractRNG, n::T) where T<:Integer
randstring()
randstring(chars)
randstring(chars, n::Integer)
randstring(n::Integer)
randstring(r::AbstractRNG)
randstring(r::AbstractRNG, chars)
randstring(r::AbstractRNG, chars, n::Integer)
randstring(r::AbstractRNG, n::Integer)
randsubseq!(S::AbstractArray, A::AbstractArray, p::Real)
randsubseq!(r::AbstractRNG, S::AbstractArray, A::AbstractArray, p::Real)
randsubseq(A::AbstractArray, p::Real)
randsubseq(r::AbstractRNG, A::AbstractArray{T}, p::Real) where T
seed!()
seed!(r::MersenneTwister, ::Nothing)
seed!(r::MersenneTwister, seed)
seed!(rng::AbstractRNG)
seed!(rng::RandomDevice, ::Nothing)
seed!(rng::Union{TaskLocalRNG, Xoshiro}, ::Nothing)
seed!(rng::Union{TaskLocalRNG, Xoshiro}, seed)
seed!(seed)
shuffle!(a::AbstractArray)
shuffle!(r::AbstractRNG, a::AbstractArray)
shuffle!(r::AbstractRNG, a::AbstractArray{Bool})
shuffle(a::AbstractArray)
shuffle(r::AbstractRNG, a::AbstractArray)
shuffle(r::AbstractRNG, a::Base.OneTo)
