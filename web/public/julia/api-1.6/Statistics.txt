cor(X::AbstractMatrix{T} where T; dims)
cor(x::AbstractVecOrMat{T} where T, y::AbstractVecOrMat{T} where T; dims)
cor(x::AbstractVector{T} where T)
cor(x::AbstractVector{T} where T, y::AbstractVector{T} where T)
cov(X::AbstractMatrix{T} where T; dims, corrected)
cov(X::AbstractVecOrMat{T} where T, Y::AbstractVecOrMat{T} where T; dims, corrected)
cov(X::SparseArrays.SparseMatrixCSC; dims, corrected)
cov(x::AbstractVector{T} where T, y::AbstractVector{T} where T; corrected)
cov(x::AbstractVector{T} where T; corrected)
mean!(R::AbstractArray, A::AbstractArray)
mean(A::AbstractArray; dims)
mean(f, A::AbstractArray; dims)
mean(f, itr)
mean(itr)
mean(r::AbstractRange{var"#s814"} where var"#s814"<:Real)
median!(v::AbstractArray)
median!(v::AbstractVector{T} where T)
median(itr)
median(r::AbstractRange{var"#s814"} where var"#s814"<:Real)
median(v::AbstractArray; dims)
middle(a::AbstractArray)
middle(a::AbstractRange)
middle(x::AbstractFloat)
middle(x::Number)
middle(x::Number, y::Number)
middle(x::Union{Bool, Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8})
quantile!(q::AbstractArray, v::AbstractVector{T} where T, p::AbstractArray; sorted, alpha, beta)
quantile!(v::AbstractVector{T} where T, p::Real; sorted, alpha, beta)
quantile!(v::AbstractVector{T} where T, p::Union{Tuple{Vararg{Real, N} where N}, AbstractArray}; sorted, alpha, beta)
quantile(itr, p; sorted, alpha, beta)
quantile(v::AbstractVector{T} where T, p; sorted, alpha, beta)
std(A::AbstractArray; corrected, mean, dims)
std(iterable; corrected, mean)
stdm(A::AbstractArray, m; corrected)
stdm(iterable, m; corrected)
var(A::AbstractArray; corrected, mean, dims)
var(iterable; corrected, mean)
var(v::AbstractRange)
varm(A::AbstractArray, m::AbstractArray; corrected, dims)
varm(A::AbstractArray, m; corrected)
varm(iterable, m; corrected)
varm(v::AbstractRange, m)
varm(v::AbstractRange, m::AbstractArray)
