/(A::AbstractMatrix, B::Adjoint{<:Any, <:Bidiagonal})
/(A::AbstractMatrix, B::Bidiagonal)
/(A::AbstractMatrix, B::Transpose{<:Any, <:Bidiagonal})
/(A::AbstractMatrix, B::Union{LowerTriangular, UpperTriangular})
/(A::AbstractMatrix, B::Union{UnitLowerTriangular, UnitUpperTriangular})
/(A::AbstractMatrix, F::Adjoint{<:Any, <:LU})
/(A::AbstractMatrix, J::UniformScaling)
/(A::AbstractVecOrMat, B::AbstractVecOrMat)
/(A::AbstractVecOrMat, D::Diagonal)
/(A::AbstractVector, B::Union{LowerTriangular, UpperTriangular})
/(A::AbstractVector, B::Union{UnitLowerTriangular, UnitUpperTriangular})
/(A::Adjoint{T, <:AbstractVector} where T, B::Adjoint{<:Any, <:Bidiagonal})
/(A::Adjoint{T, <:AbstractVector} where T, B::Bidiagonal)
/(A::Adjoint{T, <:AbstractVector} where T, B::Transpose{<:Any, <:Bidiagonal})
/(A::Bidiagonal, B::Number)
/(A::Diagonal, D::Diagonal)
/(A::Hermitian, x::Real)
/(A::LowerTriangular, B::LowerTriangular)
/(A::LowerTriangular, B::UnitLowerTriangular)
/(A::LowerTriangular, D::Diagonal)
/(A::LowerTriangular, x::Number)
/(A::SymTridiagonal, B::Number)
/(A::Symmetric, x::Number)
/(A::Transpose{T, <:AbstractVector} where T, B::Adjoint{<:Any, <:Bidiagonal})
/(A::Transpose{T, <:AbstractVector} where T, B::Bidiagonal)
/(A::Transpose{T, <:AbstractVector} where T, B::Transpose{<:Any, <:Bidiagonal})
/(A::Tridiagonal, B::Number)
/(A::Union{Hermitian{T, S}, Symmetric{T, S}} where {T, S}, D::Diagonal)
/(A::UnitLowerTriangular, B::LowerTriangular)
/(A::UnitLowerTriangular, B::UnitLowerTriangular)
/(A::UnitLowerTriangular, D::Diagonal)
/(A::UnitLowerTriangular, x::Number)
/(A::UnitUpperTriangular, B::UnitUpperTriangular)
/(A::UnitUpperTriangular, B::UpperTriangular)
/(A::UnitUpperTriangular, D::Diagonal)
/(A::UnitUpperTriangular, x::Number)
/(A::UpperTriangular, B::UnitUpperTriangular)
/(A::UpperTriangular, B::UpperTriangular)
/(A::UpperTriangular, D::Diagonal)
/(A::UpperTriangular, x::Number)
/(B::AbstractMatrix, F::Transpose{<:Any, <:Factorization{<:Real}})
/(B::AbstractMatrix, F::Transpose{<:Any, <:Factorization})
/(B::AbstractMatrix, F::Union{Adjoint{<:Any, <:Factorization}, Factorization})
/(B::Adjoint{T, <:AbstractVector} where T, F::Transpose{<:Any, <:Factorization{<:Real}})
/(B::Adjoint{T, <:AbstractVector} where T, F::Transpose{<:Any, <:Factorization})
/(B::Bidiagonal, L::LowerTriangular)
/(B::Bidiagonal, L::UnitLowerTriangular)
/(B::Bidiagonal, U::UnitUpperTriangular)
/(B::Bidiagonal, U::UpperTriangular)
/(B::Transpose{T, <:AbstractVector} where T, F::Transpose{<:Any, <:Factorization{<:Real}})
/(B::Transpose{T, <:AbstractVector} where T, F::Transpose{<:Any, <:Factorization})
/(B::Transpose{T, <:AbstractVector} where T, adjF::Adjoint{<:Any, <:Factorization})
/(B::Union{Array{Complex{T}, 1}, Array{Complex{T}, 2}}, F::Factorization{T}) where T<:Union{Float32, Float64}
/(D::Diagonal, B::Bidiagonal)
/(D::Diagonal, x::Number)
/(H::UpperHessenberg, B::Bidiagonal)
/(H::UpperHessenberg, U::UnitUpperTriangular)
/(H::UpperHessenberg, U::UpperTriangular)
/(H::UpperHessenberg, x::Diagonal)
/(H::UpperHessenberg, x::Number)
/(H::UpperHessenberg, x::UniformScaling)
/(H::UpperHessenberg{var"#s972", S} where {var"#s972"<:Number, S<:AbstractMatrix{var"#s972"}}, B::Bidiagonal{var"#s971", V} where {var"#s971"<:Number, V<:AbstractVector{var"#s971"}})
/(J1::UniformScaling, J2::UniformScaling)
/(J::UniformScaling, A::AbstractMatrix)
/(J::UniformScaling, x::Number)
/(L::LowerTriangular, B::Bidiagonal)
/(L::UnitLowerTriangular, B::Bidiagonal)
/(S::SymTridiagonal, D::Diagonal)
/(T::Tridiagonal, D::Diagonal)
/(U::UnitUpperTriangular, B::Bidiagonal)
/(U::UpperTriangular, B::Bidiagonal)
/(adjA::Adjoint{T, <:AbstractMatrix} where T, F::Adjoint{<:Any, <:LU})
/(adjA::Adjoint{T, <:AbstractVector} where T, F::Adjoint{<:Any, <:LU})
/(adjB::Adjoint{T, <:AbstractVector} where T, adjF::Adjoint{<:Any, <:Factorization})
/(trA::Transpose{T, <:AbstractMatrix} where T, F::Adjoint{<:Any, <:LU})
/(trA::Transpose{T, <:AbstractVector} where T, F::Adjoint{<:Any, <:LU})
/(u::Adjoint{T, <:AbstractVector} where T, A::AbstractMatrix)
/(u::Adjoint{T, <:AbstractVector} where T, A::Transpose{T, <:AbstractMatrix} where T)
/(u::Adjoint{T, <:AbstractVector} where T, A::Union{LowerTriangular, UpperTriangular})
/(u::Adjoint{T, <:AbstractVector} where T, A::Union{UnitLowerTriangular, UnitUpperTriangular})
/(u::Adjoint{T, <:AbstractVector} where T, D::Diagonal)
/(u::Transpose{T, <:AbstractVector} where T, A::AbstractMatrix)
/(u::Transpose{T, <:AbstractVector} where T, A::Adjoint{T, <:AbstractMatrix} where T)
/(u::Transpose{T, <:AbstractVector} where T, A::LowerTriangular{<:Any, <:Adjoint})
/(u::Transpose{T, <:AbstractVector} where T, A::LowerTriangular{<:Any, <:Transpose})
/(u::Transpose{T, <:AbstractVector} where T, A::Union{LowerTriangular, UpperTriangular})
/(u::Transpose{T, <:AbstractVector} where T, A::Union{UnitLowerTriangular, UnitUpperTriangular})
/(u::Transpose{T, <:AbstractVector} where T, A::UnitLowerTriangular{<:Any, <:Adjoint})
/(u::Transpose{T, <:AbstractVector} where T, A::UnitLowerTriangular{<:Any, <:Transpose})
/(u::Transpose{T, <:AbstractVector} where T, A::UnitUpperTriangular{<:Any, <:Adjoint})
/(u::Transpose{T, <:AbstractVector} where T, A::UnitUpperTriangular{<:Any, <:Transpose})
/(u::Transpose{T, <:AbstractVector} where T, A::UpperTriangular{<:Any, <:Adjoint})
/(u::Transpose{T, <:AbstractVector} where T, A::UpperTriangular{<:Any, <:Transpose})
/(u::Transpose{T, <:AbstractVector} where T, D::Diagonal)
/(v::AbstractVector, J::UniformScaling)
/(x::Number, v::AbstractVector)
\(A::AbstractMatrix, B::AbstractVecOrMat)
\(A::AbstractMatrix, J::UniformScaling)
\(A::Adjoint{<:Any, <:LU}, B::Adjoint{<:Any, <:AbstractVecOrMat})
\(A::Adjoint{<:Any, <:Tridiagonal}, B::Adjoint{<:Any, <:AbstractVecOrMat})
\(A::Adjoint{T, <:LU{T, <:StridedMatrix{T} where T}}, B::Adjoint{T, <:StridedVecOrMat{T}}) where T<:Union{ComplexF64, ComplexF32}
\(A::Bidiagonal, B::AbstractVecOrMat)
\(A::LowerTriangular, B::LowerTriangular)
\(A::LowerTriangular, B::UnitLowerTriangular)
\(A::Transpose{<:Any, <:LU}, B::Transpose{<:Any, <:AbstractVecOrMat})
\(A::Transpose{T, <:LU{T, <:StridedMatrix{T} where T}}, B::Transpose{T, <:StridedVecOrMat{T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
\(A::Union{Hermitian{T, S}, Symmetric{T, S}} where {T, S}, B::AbstractMatrix)
\(A::Union{Hermitian{T, S}, Symmetric{T, S}} where {T, S}, B::AbstractVector)
\(A::Union{LowerTriangular, UpperTriangular}, B::AbstractMatrix)
\(A::Union{LowerTriangular, UpperTriangular}, B::AbstractVector)
\(A::Union{QR{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}, LinearAlgebra.QRCompactWY{T, M, C} where {M<:AbstractMatrix{T}, C<:AbstractMatrix{T}}, QRPivoted{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}}, BIn::Union{Array{Complex{T}, 1}, Array{Complex{T}, 2}}) where T<:Union{Float32, Float64}
\(A::Union{UnitLowerTriangular, UnitUpperTriangular}, B::AbstractMatrix)
\(A::Union{UnitLowerTriangular, UnitUpperTriangular}, B::AbstractVector)
\(A::UnitLowerTriangular, B::LowerTriangular)
\(A::UnitLowerTriangular, B::UnitLowerTriangular)
\(A::UnitUpperTriangular, B::UnitUpperTriangular)
\(A::UnitUpperTriangular, B::UpperTriangular)
\(A::UpperTriangular, B::UnitUpperTriangular)
\(A::UpperTriangular, B::UpperTriangular)
\(B::Bidiagonal, D::Diagonal)
\(B::Bidiagonal, H::UpperHessenberg)
\(B::Bidiagonal, L::LowerTriangular)
\(B::Bidiagonal, L::UnitLowerTriangular)
\(B::Bidiagonal, U::UnitUpperTriangular)
\(B::Bidiagonal, U::UpperTriangular)
\(B::Bidiagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}}, H::UpperHessenberg{var"#s971", S} where {var"#s971"<:Number, S<:AbstractMatrix{var"#s971"}})
\(B::Number, A::Bidiagonal)
\(B::Number, A::SymTridiagonal)
\(B::Number, A::Tridiagonal)
\(D::Diagonal, A::LowerTriangular)
\(D::Diagonal, A::UnitLowerTriangular)
\(D::Diagonal, A::UnitUpperTriangular)
\(D::Diagonal, A::UpperTriangular)
\(D::Diagonal, B::AbstractMatrix)
\(D::Diagonal, B::AbstractVector)
\(D::Diagonal, B::Diagonal)
\(D::Diagonal, B::Union{Hermitian{T, S}, Symmetric{T, S}} where {T, S})
\(D::Diagonal, S::SymTridiagonal)
\(D::Diagonal, T::Tridiagonal)
\(F::Factorization, J::UniformScaling)
\(F::Factorization{T}, B::Union{Array{Complex{T}, 1}, Array{Complex{T}, 2}}) where T<:Union{Float32, Float64}
\(F::LQ{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}, B::Union{Array{Complex{T}, 1}, Array{Complex{T}, 2}}) where T<:Union{Float32, Float64}
\(F::Transpose{<:Any, <:Factorization{<:Real}}, B::AbstractVecOrMat)
\(F::Transpose{<:Any, <:Factorization}, B::AbstractVecOrMat)
\(F::Union{Adjoint{<:Any, <:Factorization}, Factorization}, B::AbstractVecOrMat)
\(F::Union{Adjoint{<:Any, <:Union{Cholesky{T, S}, BunchKaufman{T, S}, LQ{T, S, C} where C<:AbstractVector{T}, LU{T, S}, QR{T, S, C} where C<:AbstractVector{T}, LinearAlgebra.QRCompactWY{T, S, C} where C<:AbstractMatrix{T}, QRPivoted{T, S, C} where C<:AbstractVector{T}, SVD{T, var"#s972", S, C} where {var"#s972"<:Real, C<:AbstractVector{var"#s972"}}} where {T, S}}, Union{Cholesky{T, S}, BunchKaufman{T, S}, LQ{T, S, C} where C<:AbstractVector{T}, LU{T, S}, QR{T, S, C} where C<:AbstractVector{T}, LinearAlgebra.QRCompactWY{T, S, C} where C<:AbstractMatrix{T}, QRPivoted{T, S, C} where C<:AbstractVector{T}, SVD{T, var"#s972", S, C} where {var"#s972"<:Real, C<:AbstractVector{var"#s972"}}} where {T, S}}, B::AbstractVecOrMat)
\(F::Union{Cholesky{T, S}, BunchKaufman{T, S}, LQ{T, S, C} where C<:AbstractVector{T}, LU{T, S}, QR{T, S, C} where C<:AbstractVector{T}, LinearAlgebra.QRCompactWY{T, S, C} where C<:AbstractMatrix{T}, QRPivoted{T, S, C} where C<:AbstractVector{T}, SVD{T, var"#s972", S, C} where {var"#s972"<:Real, C<:AbstractVector{var"#s972"}}} where S, B::Union{Array{Complex{T}, 1}, Array{Complex{T}, 2}}) where T<:Union{Float32, Float64}
\(J1::UniformScaling, J2::UniformScaling)
\(J::UniformScaling, A::AbstractVecOrMat)
\(L::LowerTriangular, B::Bidiagonal)
\(L::UnitLowerTriangular, B::Bidiagonal)
\(T::SymTridiagonal, B::AbstractVecOrMat)
\(U::UnitUpperTriangular, B::Bidiagonal)
\(U::UnitUpperTriangular, H::UpperHessenberg)
\(U::UpperTriangular, B::Bidiagonal)
\(U::UpperTriangular, H::UpperHessenberg)
\(a::AbstractVector, b::AbstractArray)
\(adjA::Adjoint{<:Any, <:Bidiagonal}, B::AbstractVecOrMat)
\(tA::Transpose{<:Any, <:Bidiagonal}, B::AbstractVecOrMat)
\(u::Union{Adjoint{T, var"#s972"}, Transpose{T, var"#s972"}} where {T, var"#s972"<:(AbstractVector)}, v::Union{Adjoint{T, var"#s972"}, Transpose{T, var"#s972"}} where {T, var"#s972"<:(AbstractVector)})
\(x::Diagonal, H::UpperHessenberg)
\(x::Number, A::LowerTriangular)
\(x::Number, A::UnitLowerTriangular)
\(x::Number, A::UnitUpperTriangular)
\(x::Number, A::UpperTriangular)
\(x::Number, D::Diagonal)
\(x::Number, H::UpperHessenberg)
\(x::Number, J::UniformScaling)
\(x::UniformScaling, H::UpperHessenberg)
adjoint!(A::LowerTriangular)
adjoint!(A::UnitLowerTriangular)
adjoint!(A::UnitUpperTriangular)
adjoint!(A::UpperTriangular)
adjoint!(B::AbstractMatrix, A::AbstractMatrix)
adjoint!(B::AbstractMatrix, A::AbstractVector)
adjoint!(B::AbstractVector, A::AbstractMatrix)
adjoint(A::AbstractVecOrMat)
adjoint(A::Adjoint)
adjoint(A::Hermitian)
adjoint(A::LQ)
adjoint(A::LowerTriangular)
adjoint(A::Symmetric)
adjoint(A::Symmetric{var"#s972", S} where {var"#s972"<:Real, S<:(AbstractMatrix{<:var"#s972"})})
adjoint(A::Transpose{<:Real})
adjoint(A::UnitLowerTriangular)
adjoint(A::UnitUpperTriangular)
adjoint(A::UpperTriangular)
adjoint(B::Bidiagonal)
adjoint(B::Bidiagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}})
adjoint(B::BunchKaufman)
adjoint(B::Union{BitVector, BitMatrix})
adjoint(C::Union{Cholesky, CholeskyPivoted})
adjoint(D::Diagonal)
adjoint(D::Diagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}})
adjoint(F::Hessenberg)
adjoint(F::LDLt)
adjoint(F::LDLt{<:Real, <:SymTridiagonal})
adjoint(F::LU)
adjoint(F::SVD)
adjoint(F::Union{QR, LinearAlgebra.QRCompactWY, QRPivoted})
adjoint(G::LinearAlgebra.Givens)
adjoint(J::UniformScaling)
adjoint(R::LinearAlgebra.AbstractRotation)
adjoint(S::SymTridiagonal)
adjoint(S::SymTridiagonal{var"#s972", V} where {var"#s972"<:Real, V<:AbstractVector{var"#s972"}})
adjoint(S::Tridiagonal)
adjoint(S::Tridiagonal{var"#s972", V} where {var"#s972"<:Real, V<:AbstractVector{var"#s972"}})
adjoint(a::AbstractArray)
adjoint(adjR::LinearAlgebra.AdjointRotation)
axpby!(α, x::AbstractArray, β, y::AbstractArray)
axpby!(α::Number, x::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}, β::Number, y::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
axpy!(α, x::AbstractArray, rx::AbstractArray{<:Integer}, y::AbstractArray, ry::AbstractArray{<:Integer})
axpy!(α, x::AbstractArray, y::AbstractArray)
axpy!(α::Number, x::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}, rx::AbstractRange{<:Integer}, y::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}, ry::AbstractRange{<:Integer}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
axpy!(α::Number, x::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}, y::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
bunchkaufman!(A::Hermitian{<:Union{ComplexF64, ComplexF32}, <:StridedMatrix{T} where T})
bunchkaufman!(A::Hermitian{<:Union{ComplexF64, ComplexF32}, <:StridedMatrix{T} where T}, rook::Bool; check)
bunchkaufman!(A::StridedMatrix{var"#s967"} where var"#s967"<:Union{Float32, Float64, ComplexF64, ComplexF32}, rook::Bool; check)
bunchkaufman!(A::StridedMatrix{var"#s968"} where var"#s968"<:Union{Float32, Float64, ComplexF64, ComplexF32})
bunchkaufman!(A::Union{Hermitian{var"#s964", var"#s963"}, Symmetric{var"#s964", var"#s963"}, Symmetric{Complex{var"#s964"}, var"#s963"}} where {var"#s964"<:Union{Float32, Float64}, var"#s963"<:(StridedMatrix{T} where T)}, rook::Bool; check)
bunchkaufman!(A::Union{Hermitian{var"#s966", var"#s965"}, Symmetric{var"#s966", var"#s965"}, Symmetric{Complex{var"#s966"}, var"#s965"}} where {var"#s966"<:Union{Float32, Float64}, var"#s965"<:(StridedMatrix{T} where T)})
bunchkaufman(A::AbstractMatrix{T}) where T
bunchkaufman(A::AbstractMatrix{T}, rook::Bool; check) where T
cholesky!(A::AbstractMatrix)
cholesky!(A::AbstractMatrix, ::NoPivot; check)
cholesky!(A::AbstractMatrix, ::RowMaximum; tol, check)
cholesky!(A::Diagonal)
cholesky!(A::Diagonal, ::NoPivot; check)
cholesky!(A::Diagonal, ::Val{false}; check)
cholesky!(A::StridedMatrix{T} where T, ::Val{false}; check)
cholesky!(A::StridedMatrix{T} where T, ::Val{true}; kwargs...)
cholesky!(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S})
cholesky!(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}, ::NoPivot; check)
cholesky!(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}, ::Val{false}; check)
cholesky!(A::Union{Hermitian{var"#s966", var"#s965"}, Hermitian{Complex{var"#s966"}, var"#s965"}, Symmetric{var"#s966", var"#s965"}} where {var"#s966"<:Union{Float32, Float64}, var"#s965"<:(StridedMatrix{T} where T)}, ::RowMaximum; tol, check)
cholesky!(A::Union{Hermitian{var"#s967", var"#s966"}, Hermitian{Complex{var"#s967"}, var"#s966"}, Symmetric{var"#s967", var"#s966"}} where {var"#s967"<:Union{Float32, Float64}, var"#s966"<:(StridedMatrix{T} where T)}, ::Val{true}; kwargs...)
cholesky!(A::Union{Hermitian{var"#s968", S}, Hermitian{Complex{var"#s968"}, S}, Symmetric{var"#s968", S}} where {var"#s968"<:Real, S}, ::RowMaximum; tol, check)
cholesky!(A::Union{Hermitian{var"#s968", S}, Hermitian{Complex{var"#s968"}, S}, Symmetric{var"#s968", S}} where {var"#s968"<:Real, S}, ::Val{true}; kwargs...)
cholesky(A::AbstractMatrix)
cholesky(A::AbstractMatrix, ::NoPivot; check)
cholesky(A::AbstractMatrix, ::RowMaximum; tol, check)
cholesky(A::AbstractMatrix{Float16})
cholesky(A::AbstractMatrix{Float16}, ::NoPivot; check)
cholesky(A::AbstractMatrix{Float16}, ::RowMaximum; tol, check)
cholesky(A::Diagonal, ::Val{false}; check)
cholesky(A::Union{Union{Hermitian{ComplexF16, var"#s968"}, Hermitian{Float16, var"#s968"}, Symmetric{Float16, var"#s968"}} where var"#s968"<:(StridedMatrix{T} where T), StridedMatrix{Float16}}, ::Val{false}; check)
cholesky(A::Union{Union{Hermitian{var"#s967", var"#s966"}, Hermitian{Complex{var"#s967"}, var"#s966"}, Symmetric{var"#s967", var"#s966"}} where {var"#s967"<:Real, var"#s966"<:(StridedMatrix{T} where T)}, StridedMatrix}, ::Val{false}; check)
cholesky(A::Union{Union{Hermitian{var"#s967", var"#s966"}, Hermitian{Complex{var"#s967"}, var"#s966"}, Symmetric{var"#s967", var"#s966"}} where {var"#s967"<:Real, var"#s966"<:(StridedMatrix{T} where T)}, StridedMatrix}, ::Val{true}; tol, check)
cholesky(S::SymTridiagonal)
cholesky(S::SymTridiagonal, ::NoPivot; check)
cholesky(S::Union{Hermitian{var"#s964", var"#s963"}, Hermitian{Complex{var"#s964"}, var"#s963"}, Symmetric{var"#s964", var"#s963"}} where {var"#s964"<:Real, var"#s963"<:SymTridiagonal}, ::NoPivot; check)
cholesky(S::Union{Hermitian{var"#s966", var"#s965"}, Hermitian{Complex{var"#s966"}, var"#s965"}, Symmetric{var"#s966", var"#s965"}} where {var"#s966"<:Real, var"#s965"<:SymTridiagonal})
cholesky(x::Number)
cholesky(x::Number, uplo::Symbol)
cond(A::AbstractMatrix)
cond(A::AbstractMatrix, p::Real)
cond(A::LowerTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T})
cond(A::LowerTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T}, p::Real)
cond(A::UnitLowerTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T})
cond(A::UnitLowerTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T}, p::Real)
cond(A::UnitUpperTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T})
cond(A::UnitUpperTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T}, p::Real)
cond(A::UpperTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T})
cond(A::UpperTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T}, p::Real)
cond(J::UniformScaling{T}) where T
cond(x::Number)
cond(x::Number, p)
condskeel(A::AbstractMatrix)
condskeel(A::AbstractMatrix, p::Real)
condskeel(A::AbstractMatrix, x::AbstractVector)
condskeel(A::AbstractMatrix, x::AbstractVector, p::Real)
copy_transpose!(B::AbstractMatrix, ir_dest::AbstractUnitRange{Int64}, jr_dest::AbstractUnitRange{Int64}, tM::AbstractChar, M::AbstractVecOrMat, ir_src::AbstractUnitRange{Int64}, jr_src::AbstractUnitRange{Int64})
copy_transpose!(B::AbstractVecOrMat, ir_dest::AbstractRange{Int64}, jr_dest::AbstractRange{Int64}, A::AbstractVecOrMat, ir_src::AbstractRange{Int64}, jr_src::AbstractRange{Int64})
copyto!(A::AbstractMatrix, J::UniformScaling)
copyto!(A::T, B::T) where T<:Union{LowerTriangular, UnitLowerTriangular}
copyto!(A::T, B::T) where T<:Union{UnitUpperTriangular, UpperTriangular}
copyto!(B::AbstractVecOrMat, ir_dest::AbstractUnitRange{Int64}, jr_dest::AbstractUnitRange{Int64}, tM::AbstractChar, M::AbstractVecOrMat, ir_src::AbstractUnitRange{Int64}, jr_src::AbstractUnitRange{Int64})
copyto!(D1::Diagonal, D2::Diagonal)
copyto!(dest::AbstractMatrix, src::LinearAlgebra.AbstractQ)
copyto!(dest::Array{T}, rdest::AbstractRange{Ti}, src::Array{T}, rsrc::AbstractRange{Ti}) where {T<:Union{Float32, Float64, ComplexF64, ComplexF32}, Ti<:Integer}
copyto!(dest::Bidiagonal, bc::Base.Broadcast.Broadcasted{<:LinearAlgebra.StructuredMatrixStyle})
copyto!(dest::Diagonal, bc::Base.Broadcast.Broadcasted{<:LinearAlgebra.StructuredMatrixStyle})
copyto!(dest::Hermitian, src::Hermitian)
copyto!(dest::LowerTriangular, bc::Base.Broadcast.Broadcasted{<:LinearAlgebra.StructuredMatrixStyle})
copyto!(dest::PermutedDimsArray{T, 2, perm}, src::LinearAlgebra.AbstractQ) where {T, perm}
copyto!(dest::SymTridiagonal, bc::Base.Broadcast.Broadcasted{<:LinearAlgebra.StructuredMatrixStyle})
copyto!(dest::SymTridiagonal, src::SymTridiagonal)
copyto!(dest::Symmetric, src::Symmetric)
copyto!(dest::Tridiagonal, bc::Base.Broadcast.Broadcasted{<:LinearAlgebra.StructuredMatrixStyle})
copyto!(dest::Tridiagonal, src::Tridiagonal)
copyto!(dest::UpperTriangular, bc::Base.Broadcast.Broadcasted{<:LinearAlgebra.StructuredMatrixStyle})
cross(a::AbstractVector, b::AbstractVector)
cross(a::AbstractVector, b::AbstractVector)
det(A::AbstractMatrix{BigInt})
det(A::AbstractMatrix{T}) where T
det(A::Eigen)
det(A::LowerTriangular)
det(A::SymTridiagonal; shift)
det(A::Symmetric)
det(A::Symmetric{var"#s972", S} where {var"#s972"<:Real, S<:(AbstractMatrix{<:var"#s972"})})
det(A::Tridiagonal)
det(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S})
det(A::UnitLowerTriangular{T, S} where S<:AbstractMatrix{T}) where T
det(A::UnitUpperTriangular{T, S} where S<:AbstractMatrix{T}) where T
det(A::UpperTriangular)
det(C::Cholesky)
det(C::CholeskyPivoted)
det(D::Diagonal)
det(F::Factorization)
det(F::Hessenberg)
det(F::LU{T, S} where S<:AbstractMatrix{T}) where T
det(F::UpperHessenberg; shift)
det(J::UniformScaling{T}) where T
det(Q::LinearAlgebra.LQPackedQ)
det(Q::LinearAlgebra.QRCompactWYQ)
det(Q::LinearAlgebra.QRPackedQ)
det(x::Number)
diag(A::AbstractMatrix)
diag(A::AbstractMatrix, k::Integer)
diag(A::AbstractVector)
diag(A::Hermitian)
diag(A::LowerTriangular)
diag(A::Symmetric)
diag(A::UnitLowerTriangular)
diag(A::UnitUpperTriangular)
diag(A::UpperTriangular)
diag(B::BitMatrix)
diag(D::Diagonal{T, V} where V<:AbstractVector{T}) where T
diag(D::Diagonal{T, V} where V<:AbstractVector{T}, k::Integer) where T
diag(M::Bidiagonal{T, V} where V<:AbstractVector{T}) where T
diag(M::Bidiagonal{T, V} where V<:AbstractVector{T}, n::Integer) where T
diag(M::SymTridiagonal)
diag(M::SymTridiagonal, n::Integer)
diag(M::SymTridiagonal{T, V} where V<:AbstractVector{T}) where T<:Number
diag(M::SymTridiagonal{T, V} where V<:AbstractVector{T}, n::Integer) where T<:Number
diag(M::Tridiagonal{T, V} where V<:AbstractVector{T}) where T
diag(M::Tridiagonal{T, V} where V<:AbstractVector{T}, n::Integer) where T
diagind(A::AbstractMatrix)
diagind(A::AbstractMatrix, k::Integer)
diagind(m::Integer, n::Integer)
diagind(m::Integer, n::Integer, k::Integer)
diagm(kv::Pair{<:Integer, <:AbstractVector}...)
diagm(m::Integer, n::Integer, kv::Pair{<:Integer, <:AbstractVector}...)
diagm(m::Integer, n::Integer, v::AbstractVector)
diagm(v::AbstractVector)
dot(A::AbstractMatrix, B::Diagonal)
dot(A::AbstractMatrix, B::Diagonal)
dot(A::AbstractMatrix, J::UniformScaling)
dot(A::AbstractMatrix, J::UniformScaling)
dot(A::Diagonal, B::Diagonal)
dot(A::Diagonal, B::Diagonal)
dot(A::Hermitian, B::Hermitian)
dot(A::Hermitian, B::Hermitian)
dot(A::Symmetric, B::Symmetric)
dot(A::Symmetric, B::Symmetric)
dot(D::Diagonal, B::AbstractMatrix)
dot(D::Diagonal, B::AbstractMatrix)
dot(J::UniformScaling, A::AbstractMatrix)
dot(J::UniformScaling, A::AbstractMatrix)
dot(x, A, y)
dot(x, A, y)
dot(x, y)
dot(x, y)
dot(x::AbstractArray, y::AbstractArray)
dot(x::AbstractArray, y::AbstractArray)
dot(x::AbstractVector, A::AbstractMatrix, y::AbstractVector)
dot(x::AbstractVector, A::AbstractMatrix, y::AbstractVector)
dot(x::AbstractVector, A::LowerTriangular, y::AbstractVector)
dot(x::AbstractVector, A::LowerTriangular, y::AbstractVector)
dot(x::AbstractVector, A::Tridiagonal, y::AbstractVector)
dot(x::AbstractVector, A::Tridiagonal, y::AbstractVector)
dot(x::AbstractVector, A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}, y::AbstractVector)
dot(x::AbstractVector, A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}, y::AbstractVector)
dot(x::AbstractVector, A::UnitLowerTriangular, y::AbstractVector)
dot(x::AbstractVector, A::UnitLowerTriangular, y::AbstractVector)
dot(x::AbstractVector, A::UnitUpperTriangular, y::AbstractVector)
dot(x::AbstractVector, A::UnitUpperTriangular, y::AbstractVector)
dot(x::AbstractVector, A::UpperTriangular, y::AbstractVector)
dot(x::AbstractVector, A::UpperTriangular, y::AbstractVector)
dot(x::AbstractVector, B::Bidiagonal, y::AbstractVector)
dot(x::AbstractVector, B::Bidiagonal, y::AbstractVector)
dot(x::AbstractVector, D::Diagonal, y::AbstractVector)
dot(x::AbstractVector, D::Diagonal, y::AbstractVector)
dot(x::AbstractVector, H::UpperHessenberg, y::AbstractVector)
dot(x::AbstractVector, H::UpperHessenberg, y::AbstractVector)
dot(x::AbstractVector, J::UniformScaling, y::AbstractVector)
dot(x::AbstractVector, J::UniformScaling, y::AbstractVector)
dot(x::AbstractVector, S::SymTridiagonal, y::AbstractVector)
dot(x::AbstractVector, S::SymTridiagonal, y::AbstractVector)
dot(x::AbstractVector, a::Number, y::AbstractVector)
dot(x::AbstractVector, a::Number, y::AbstractVector)
dot(x::AbstractVector, a::Union{Real, Complex}, y::AbstractVector)
dot(x::AbstractVector, a::Union{Real, Complex}, y::AbstractVector)
dot(x::AbstractVector, adjA::Adjoint, y::AbstractVector)
dot(x::AbstractVector, adjA::Adjoint, y::AbstractVector)
dot(x::AbstractVector, transA::Transpose{<:Real}, y::AbstractVector)
dot(x::AbstractVector, transA::Transpose{<:Real}, y::AbstractVector)
dot(x::Adjoint{<:Union{Real, Complex}}, y::Adjoint{<:Union{Real, Complex}})
dot(x::Adjoint{<:Union{Real, Complex}}, y::Adjoint{<:Union{Real, Complex}})
dot(x::BitVector, y::BitVector)
dot(x::BitVector, y::BitVector)
dot(x::Number, y::Number)
dot(x::Number, y::Number)
dot(x::Transpose, y::Transpose)
dot(x::Transpose, y::Transpose)
dot(x::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}, y::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}) where T<:Union{ComplexF64, ComplexF32}
dot(x::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}, y::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}) where T<:Union{ComplexF64, ComplexF32}
dot(x::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}, y::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}) where T<:Union{Float32, Float64}
dot(x::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}, y::Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, SubArray{T, var"#s972", var"#s971", I, true} where {var"#s972", var"#s971"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray{T}}, I}, DenseArray{T}}) where T<:Union{Float32, Float64}
dot(x::Vector{T}, rx::AbstractRange{TI}, y::Vector{T}, ry::AbstractRange{TI}) where {T<:Union{ComplexF64, ComplexF32}, TI<:Integer}
dot(x::Vector{T}, rx::AbstractRange{TI}, y::Vector{T}, ry::AbstractRange{TI}) where {T<:Union{ComplexF64, ComplexF32}, TI<:Integer}
dot(x::Vector{T}, rx::AbstractRange{TI}, y::Vector{T}, ry::AbstractRange{TI}) where {T<:Union{Float32, Float64}, TI<:Integer}
dot(x::Vector{T}, rx::AbstractRange{TI}, y::Vector{T}, ry::AbstractRange{TI}) where {T<:Union{Float32, Float64}, TI<:Integer}
eigen!(A::Hermitian{T, S}, B::Hermitian{T, S}; sortby) where {T<:Union{ComplexF64, ComplexF32}, S<:(StridedMatrix{T} where T)}
eigen!(A::StridedMatrix{T}, B::StridedMatrix{T}; sortby) where T<:Union{ComplexF64, ComplexF32}
eigen!(A::StridedMatrix{T}, B::StridedMatrix{T}; sortby) where T<:Union{Float32, Float64}
eigen!(A::StridedMatrix{T}, B::Union{Diagonal{T, V} where V<:AbstractVector{T}, Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where S}; sortby) where T<:Number
eigen!(A::StridedMatrix{T}; permute, scale, sortby) where T<:Union{ComplexF64, ComplexF32}
eigen!(A::StridedMatrix{T}; permute, scale, sortby) where T<:Union{Float32, Float64}
eigen!(A::SymTridiagonal{<:Union{Float32, Float64}, <:StridedVector{T} where T})
eigen!(A::SymTridiagonal{<:Union{Float32, Float64}, <:StridedVector{T} where T}, irange::UnitRange)
eigen!(A::SymTridiagonal{<:Union{Float32, Float64}, <:StridedVector{T} where T}, vl::Real, vu::Real)
eigen!(A::Union{Hermitian{T, S}, Symmetric{T, S}}, B::Union{Hermitian{T, S}, Symmetric{T, S}}; sortby) where {T<:Union{Float32, Float64}, S<:(StridedMatrix{T} where T)}
eigen!(A::Union{Hermitian{T, var"#s969"}, Hermitian{Complex{T}, var"#s969"}, Symmetric{T, var"#s969"}} where var"#s969"<:(StridedMatrix{T} where T), B::AbstractMatrix{T}; sortby) where T<:Number
eigen!(A::Union{Hermitian{T, var"#s972"}, Hermitian{Complex{T}, var"#s972"}, Symmetric{T, var"#s972"}} where var"#s972"<:(StridedMatrix{T} where T), vl::Real, vh::Real) where T<:Union{Float32, Float64}
eigen!(A::Union{Hermitian{var"#s968", var"#s967"}, Hermitian{Complex{var"#s968"}, var"#s967"}, Symmetric{var"#s968", var"#s967"}} where {var"#s968"<:Union{Float32, Float64}, var"#s967"<:(StridedMatrix{T} where T)}; sortby)
eigen!(A::Union{Hermitian{var"#s972", var"#s971"}, Hermitian{Complex{var"#s972"}, var"#s971"}, Symmetric{var"#s972", var"#s971"}} where {var"#s972"<:Union{Float32, Float64}, var"#s971"<:(StridedMatrix{T} where T)}, irange::UnitRange)
eigen(A::AbstractMatrix, D::Diagonal; sortby)
eigen(A::AbstractMatrix{TA}, B::AbstractMatrix{TB}; kws...) where {TA, TB}
eigen(A::AbstractMatrix{T}; permute, scale, sortby) where T
eigen(A::AbstractMatrix{T}; permute, scale, sortby) where T<:Union{Float16, ComplexF16}
eigen(A::LinearAlgebra.AbstractTriangular)
eigen(A::Number, B::Number)
eigen(A::SymTridiagonal{T, V} where V<:AbstractVector{T}) where T
eigen(A::SymTridiagonal{T, V} where V<:AbstractVector{T}, irange::UnitRange) where T
eigen(A::SymTridiagonal{T, V} where V<:AbstractVector{T}, vl::Real, vu::Real) where T
eigen(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}, irange::UnitRange)
eigen(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}, vl::Real, vh::Real)
eigen(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}; sortby)
eigen(D::Diagonal; permute, scale, sortby)
eigen(Da::Diagonal, Db::Diagonal; sortby)
eigen(M::Bidiagonal)
eigen(x::Number)
eigmax(A::SymTridiagonal)
eigmax(A::Union{Hermitian{var"#s972", S}, Hermitian{Complex{var"#s972"}, S}, Symmetric{var"#s972", S}} where {var"#s972"<:Real, S})
eigmax(A::Union{Number, AbstractMatrix}; permute, scale)
eigmin(A::SymTridiagonal)
eigmin(A::Union{Hermitian{var"#s972", S}, Hermitian{Complex{var"#s972"}, S}, Symmetric{var"#s972", S}} where {var"#s972"<:Real, S})
eigmin(A::Union{Number, AbstractMatrix}; permute, scale)
eigvals!(A::Hermitian{T, S}, B::Hermitian{T, S}; sortby) where {T<:Union{ComplexF64, ComplexF32}, S<:(StridedMatrix{T} where T)}
eigvals!(A::StridedMatrix{T}, B::StridedMatrix{T}; sortby) where T<:Union{ComplexF64, ComplexF32}
eigvals!(A::StridedMatrix{T}, B::StridedMatrix{T}; sortby) where T<:Union{Float32, Float64}
eigvals!(A::StridedMatrix{var"#s968"} where var"#s968"<:Union{Float32, Float64}; permute, scale, sortby)
eigvals!(A::StridedMatrix{var"#s969"} where var"#s969"<:Union{ComplexF64, ComplexF32}; permute, scale, sortby)
eigvals!(A::SymTridiagonal{<:Union{Float32, Float64}, <:StridedVector{T} where T})
eigvals!(A::SymTridiagonal{<:Union{Float32, Float64}, <:StridedVector{T} where T}, irange::UnitRange)
eigvals!(A::SymTridiagonal{<:Union{Float32, Float64}, <:StridedVector{T} where T}, vl::Real, vu::Real)
eigvals!(A::Union{Hermitian{T, S}, Symmetric{T, S}}, B::Union{Hermitian{T, S}, Symmetric{T, S}}; sortby) where {T<:Union{Float32, Float64}, S<:(StridedMatrix{T} where T)}
eigvals!(A::Union{Hermitian{T, var"#s972"}, Hermitian{Complex{T}, var"#s972"}, Symmetric{T, var"#s972"}} where var"#s972"<:(StridedMatrix{T} where T), vl::Real, vh::Real) where T<:Union{Float32, Float64}
eigvals!(A::Union{Hermitian{var"#s968", var"#s967"}, Hermitian{Complex{var"#s968"}, var"#s967"}, Symmetric{var"#s968", var"#s967"}} where {var"#s968"<:Union{Float32, Float64}, var"#s967"<:(StridedMatrix{T} where T)}; sortby)
eigvals!(A::Union{Hermitian{var"#s972", var"#s971"}, Hermitian{Complex{var"#s972"}, var"#s971"}, Symmetric{var"#s972", var"#s971"}} where {var"#s972"<:Union{Float32, Float64}, var"#s971"<:(StridedMatrix{T} where T)}, irange::UnitRange)
eigvals(A::AbstractMatrix{TA}, B::AbstractMatrix{TB}; kws...) where {TA, TB}
eigvals(A::AbstractMatrix{T}; kws...) where T
eigvals(A::LinearAlgebra.AbstractTriangular)
eigvals(A::SymTridiagonal{T, V} where V<:AbstractVector{T}) where T
eigvals(A::SymTridiagonal{T, V} where V<:AbstractVector{T}, irange::UnitRange) where T
eigvals(A::SymTridiagonal{T, V} where V<:AbstractVector{T}, vl::Real, vu::Real) where T
eigvals(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}, irange::UnitRange)
eigvals(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}, vl::Real, vh::Real)
eigvals(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}; sortby)
eigvals(D::Diagonal; permute, scale)
eigvals(D::Diagonal{var"#s969", V} where {var"#s969"<:Number, V<:AbstractVector{var"#s969"}}; permute, scale)
eigvals(F::Union{Eigen, GeneralizedEigen})
eigvals(M::Bidiagonal)
eigvals(x::Number; kwargs...)
eigvecs(A::AbstractMatrix, B::AbstractMatrix; kws...)
eigvecs(A::LinearAlgebra.AbstractTriangular{T}) where T
eigvecs(A::LowerTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T})
eigvecs(A::SymTridiagonal)
eigvecs(A::SymTridiagonal{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedVector{T} where T}, eigvals::Vector{<:Real})
eigvecs(A::Union{Hermitian{T, S}, Symmetric{T, S}} where {T, S})
eigvecs(A::Union{Number, AbstractMatrix}; kws...)
eigvecs(A::UnitLowerTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T})
eigvecs(A::UnitUpperTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T})
eigvecs(A::UpperTriangular{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T})
eigvecs(D::Diagonal)
eigvecs(F::Union{Eigen, GeneralizedEigen})
eigvecs(M::Bidiagonal{T, V} where V<:AbstractVector{T}) where T
factorize(A::AbstractMatrix{T}) where T
factorize(A::Adjoint)
factorize(A::Bidiagonal)
factorize(A::LinearAlgebra.AbstractTriangular)
factorize(A::Transpose)
factorize(A::Tridiagonal)
factorize(A::Union{Hermitian{T, S}, Symmetric{T, S}} where {T, S})
factorize(D::Diagonal)
factorize(S::SymTridiagonal)
factorize(a::Number)
givens(A::AbstractMatrix, i1::Integer, i2::Integer, j::Integer)
givens(f::T, g::T, i1::Integer, i2::Integer) where T
givens(x::AbstractVector, i1::Integer, i2::Integer)
hessenberg!(A::StridedMatrix{var"#s972"} where var"#s972"<:Union{Float32, Float64, ComplexF64, ComplexF32})
hessenberg!(A::Union{Hermitian{<:Union{Float32, Float64, ComplexF64, ComplexF32}, <:StridedMatrix{T} where T}, Symmetric{<:Union{Float32, Float64}, <:StridedMatrix{T} where T}})
hessenberg(A::AbstractMatrix{T}) where T
isdiag(::UniformScaling)
isdiag(A::AbstractMatrix)
isdiag(D::Diagonal)
isdiag(D::Diagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}})
isdiag(M::Bidiagonal)
isdiag(M::SymTridiagonal)
isdiag(M::Tridiagonal)
isdiag(x::Number)
ishermitian(A::AbstractMatrix)
ishermitian(A::BitMatrix)
ishermitian(A::Hermitian)
ishermitian(A::Symmetric{var"#s972", S} where {var"#s972"<:Complex, S<:(AbstractMatrix{<:var"#s972"})})
ishermitian(A::Symmetric{var"#s972", S} where {var"#s972"<:Real, S<:(AbstractMatrix{<:var"#s972"})})
ishermitian(B::BunchKaufman{T}) where T
ishermitian(D::Diagonal)
ishermitian(D::Diagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}})
ishermitian(D::Diagonal{var"#s972", V} where {var"#s972"<:Real, V<:AbstractVector{var"#s972"}})
ishermitian(J::UniformScaling)
ishermitian(S::SymTridiagonal)
ishermitian(S::Tridiagonal)
ishermitian(x::Number)
isposdef!(A::AbstractMatrix)
isposdef(A::AbstractMatrix)
isposdef(A::Union{Eigen, GeneralizedEigen})
isposdef(C::Union{Cholesky, CholeskyPivoted})
isposdef(D::Diagonal)
isposdef(J::UniformScaling)
isposdef(x::Number)
issuccess(B::BunchKaufman)
issuccess(C::Union{Cholesky, CholeskyPivoted})
issuccess(F::LU)
issymmetric(::UniformScaling)
issymmetric(A::AbstractMatrix)
issymmetric(A::AbstractMatrix{<:Real})
issymmetric(A::BitMatrix)
issymmetric(A::Hermitian{var"#s972", S} where {var"#s972"<:Complex, S<:(AbstractMatrix{<:var"#s972"})})
issymmetric(A::Hermitian{var"#s972", S} where {var"#s972"<:Real, S<:(AbstractMatrix{<:var"#s972"})})
issymmetric(A::Symmetric)
issymmetric(B::BunchKaufman)
issymmetric(D::Diagonal)
issymmetric(D::Diagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}})
issymmetric(S::SymTridiagonal)
issymmetric(S::Tridiagonal)
issymmetric(x::Number)
istril(::UniformScaling)
istril(A::AbstractMatrix)
istril(A::AbstractMatrix, k::Integer)
istril(A::Adjoint)
istril(A::BitMatrix)
istril(A::Transpose)
istril(A::Union{LowerTriangular, UnitLowerTriangular})
istril(A::Union{LowerTriangular, UnitLowerTriangular}, k::Integer)
istril(D::Diagonal)
istril(D::Diagonal, k::Integer)
istril(M::Bidiagonal)
istril(M::Bidiagonal, k::Integer)
istril(M::SymTridiagonal, k::Integer)
istril(M::Tridiagonal)
istril(M::Tridiagonal, k::Integer)
istril(x::Number)
istriu(::UniformScaling)
istriu(A::AbstractMatrix)
istriu(A::AbstractMatrix, k::Integer)
istriu(A::Adjoint)
istriu(A::BitMatrix)
istriu(A::Transpose)
istriu(A::Union{UnitUpperTriangular, UpperTriangular})
istriu(A::Union{UnitUpperTriangular, UpperTriangular}, k::Integer)
istriu(D::Diagonal)
istriu(D::Diagonal, k::Integer)
istriu(M::Bidiagonal)
istriu(M::Bidiagonal, k::Integer)
istriu(M::SymTridiagonal)
istriu(M::SymTridiagonal, k::Integer)
istriu(M::Tridiagonal)
istriu(M::Tridiagonal, k::Integer)
istriu(x::Number)
kron!(C::AbstractMatrix, A::AbstractMatrix, B::Diagonal)
kron!(C::AbstractMatrix, A::Diagonal, B::AbstractMatrix)
kron!(C::AbstractMatrix, A::Diagonal, B::Diagonal)
kron!(C::AbstractVecOrMat, A::AbstractVecOrMat, B::AbstractVecOrMat)
kron!(R::BitMatrix, a::BitMatrix, b::BitMatrix)
kron!(R::BitVector, a::BitVector, b::BitVector)
kron!(c::AbstractVecOrMat, a::AbstractVecOrMat, b::Number)
kron!(c::AbstractVecOrMat, a::Number, b::AbstractVecOrMat)
kron!(c::AbstractVector, a::AbstractVector, b::AbstractVector)
kron(A::AbstractVecOrMat{T}, B::AbstractVecOrMat{S}) where {T, S}
kron(A::Diagonal, B::Bidiagonal)
kron(A::Diagonal, B::Diagonal)
kron(A::Diagonal, B::SymTridiagonal)
kron(A::Diagonal, B::Tridiagonal)
kron(a::AbstractVecOrMat, b::Number)
kron(a::AbstractVector{T}, b::AbstractVector{S}) where {T, S}
kron(a::Adjoint{T, <:AbstractVector} where T, b::Adjoint{T, <:AbstractVector} where T)
kron(a::BitMatrix, b::BitMatrix)
kron(a::BitVector, b::BitVector)
kron(a::Number, b::Union{Number, AbstractVecOrMat})
kron(a::Union{Adjoint{T, var"#s972"}, Transpose{T, var"#s972"}} where {T, var"#s972"<:(AbstractVector)}, b::Union{Adjoint{T, var"#s972"}, Transpose{T, var"#s972"}} where {T, var"#s972"<:(AbstractVector)})
ldiv!(A::Adjoint{<:Any, <:Bidiagonal}, b::AbstractVecOrMat)
ldiv!(A::Bidiagonal, b::AbstractVecOrMat)
ldiv!(A::LQ, B::AbstractVecOrMat)
ldiv!(A::LU, B::AbstractVecOrMat)
ldiv!(A::LU{T, <:StridedMatrix{T} where T}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::LU{T, Tridiagonal{T, V}}, B::AbstractVecOrMat) where {T, V}
ldiv!(A::LinearAlgebra.AbstractTriangular, B::AbstractMatrix)
ldiv!(A::LinearAlgebra.QRCompactWY{T, M, C} where {M<:AbstractMatrix{T}, C<:AbstractMatrix{T}}, B::AbstractMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::LinearAlgebra.QRCompactWY{T, M, C} where {M<:AbstractMatrix{T}, C<:AbstractMatrix{T}}, b::AbstractVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::LowerTriangular, B::LowerTriangular)
ldiv!(A::LowerTriangular, b::AbstractVector)
ldiv!(A::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{ComplexF64, ComplexF32}
ldiv!(A::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64}
ldiv!(A::LowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::LowerTriangular{T, <:StridedMatrix{T} where T}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::QR, B::AbstractVector)
ldiv!(A::QRPivoted, B::AbstractMatrix)
ldiv!(A::QRPivoted, b::AbstractVector)
ldiv!(A::QRPivoted{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}, B::AbstractMatrix{T}, rcond::Real) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::QRPivoted{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}, B::AbstractVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::QRPivoted{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}, B::AbstractVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::QR{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}, B::AbstractMatrix{T}) where T
ldiv!(A::SVD{T, Tr, M} where {Tr, M<:(AbstractArray{T})}, B::AbstractVecOrMat) where T
ldiv!(A::SymTridiagonal, B::AbstractVecOrMat; shift)
ldiv!(A::Transpose{<:Any, <:Bidiagonal}, b::AbstractVecOrMat)
ldiv!(A::UnitLowerTriangular, B::LowerTriangular)
ldiv!(A::UnitLowerTriangular, b::AbstractVector)
ldiv!(A::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{ComplexF64, ComplexF32}
ldiv!(A::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64}
ldiv!(A::UnitLowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::UnitLowerTriangular{T, <:StridedMatrix{T} where T}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::UnitUpperTriangular, B::UpperTriangular)
ldiv!(A::UnitUpperTriangular, b::AbstractVector)
ldiv!(A::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{ComplexF64, ComplexF32}
ldiv!(A::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64}
ldiv!(A::UnitUpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::UnitUpperTriangular{T, <:StridedMatrix{T} where T}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::UpperTriangular, B::UpperTriangular)
ldiv!(A::UpperTriangular, b::AbstractVector)
ldiv!(A::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{ComplexF64, ComplexF32}
ldiv!(A::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64}
ldiv!(A::UpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(A::UpperTriangular{T, <:StridedMatrix{T} where T}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(B::AbstractVecOrMat, D::Diagonal, A::AbstractVecOrMat)
ldiv!(B::BunchKaufman{T, <:StridedMatrix{T} where T}, R::StridedVecOrMat{T}) where T<:Union{ComplexF64, ComplexF32}
ldiv!(B::BunchKaufman{T, <:StridedMatrix{T} where T}, R::StridedVecOrMat{T}) where T<:Union{Float32, Float64}
ldiv!(C::Cholesky, B::AbstractVecOrMat)
ldiv!(C::CholeskyPivoted, B::AbstractMatrix)
ldiv!(C::CholeskyPivoted, B::AbstractVector)
ldiv!(C::CholeskyPivoted{T, <:StridedMatrix{T} where T}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(C::CholeskyPivoted{T, <:StridedMatrix{T} where T}, B::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(C::Cholesky{T, <:StridedMatrix{T} where T}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(C::LowerTriangular, D::Diagonal, A::LowerTriangular)
ldiv!(C::LowerTriangular, D::Diagonal, A::UnitLowerTriangular)
ldiv!(C::UpperTriangular, D::Diagonal, A::UnitUpperTriangular)
ldiv!(C::UpperTriangular, D::Diagonal, A::UpperTriangular)
ldiv!(D::Diagonal, A::LowerTriangular)
ldiv!(D::Diagonal, A::UnitLowerTriangular)
ldiv!(D::Diagonal, A::UnitUpperTriangular)
ldiv!(D::Diagonal, A::UpperTriangular)
ldiv!(D::Diagonal, B::AbstractVecOrMat)
ldiv!(Dc::Diagonal, Da::Diagonal, Db::Diagonal)
ldiv!(F::Adjoint{<:Any, <:Hessenberg}, B::AbstractVecOrMat)
ldiv!(F::Hessenberg, B::AbstractVecOrMat)
ldiv!(F::Hessenberg{<:Complex, <:Any, <:AbstractMatrix{<:Real}}, B::AbstractVecOrMat{<:Complex})
ldiv!(F::UpperHessenberg, B::AbstractVecOrMat; shift)
ldiv!(Fadj::Adjoint{<:Any, <:LQ}, B::AbstractVecOrMat)
ldiv!(Fadj::Adjoint{<:Any, <:Union{QR, LinearAlgebra.QRCompactWY, QRPivoted}}, B::AbstractVecOrMat)
ldiv!(J::UniformScaling, B::AbstractVecOrMat)
ldiv!(S::LDLt{<:Any, <:SymTridiagonal}, B::AbstractVecOrMat)
ldiv!(T::Tridiagonal, D::Diagonal, S::Union{SymTridiagonal, Tridiagonal})
ldiv!(Y::AbstractArray, A::AbstractMatrix, B::AbstractArray)
ldiv!(Y::AbstractArray, s::Number, X::AbstractArray)
ldiv!(Y::AbstractMatrix, A::Factorization, B::AbstractMatrix)
ldiv!(Y::AbstractVecOrMat, J::UniformScaling, B::AbstractVecOrMat)
ldiv!(Y::AbstractVector, A::Factorization, B::AbstractVector)
ldiv!(adjA::Adjoint{<:Any, <:LU{T, Tridiagonal{T, V}}}, B::AbstractVecOrMat) where {T, V}
ldiv!(adjA::Adjoint{<:Any, <:LU}, B::AbstractVecOrMat)
ldiv!(adjA::Adjoint{T, <:LU{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{ComplexF64, ComplexF32}
ldiv!(adjF::Adjoint{T, <:LU{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Real
ldiv!(c::AbstractVecOrMat, A::Adjoint{<:Any, <:Bidiagonal}, b::AbstractVecOrMat)
ldiv!(c::AbstractVecOrMat, A::Bidiagonal, b::AbstractVecOrMat)
ldiv!(c::AbstractVecOrMat, A::Transpose{<:Any, <:Bidiagonal}, b::AbstractVecOrMat)
ldiv!(s::Number, X::AbstractArray)
ldiv!(transA::Transpose{<:Any, <:LU{T, Tridiagonal{T, V}}}, B::AbstractVecOrMat) where {T, V}
ldiv!(transA::Transpose{<:Any, <:LU}, B::AbstractVecOrMat)
ldiv!(transA::Transpose{T, <:LU{T, <:StridedMatrix{T} where T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
ldiv!(xA::LowerTriangular{<:Any, <:Adjoint}, b::AbstractVector)
ldiv!(xA::LowerTriangular{<:Any, <:Transpose}, b::AbstractVector)
ldiv!(xA::UnitLowerTriangular{<:Any, <:Adjoint}, b::AbstractVector)
ldiv!(xA::UnitLowerTriangular{<:Any, <:Transpose}, b::AbstractVector)
ldiv!(xA::UnitUpperTriangular{<:Any, <:Adjoint}, b::AbstractVector)
ldiv!(xA::UnitUpperTriangular{<:Any, <:Transpose}, b::AbstractVector)
ldiv!(xA::UpperTriangular{<:Any, <:Adjoint}, b::AbstractVector)
ldiv!(xA::UpperTriangular{<:Any, <:Transpose}, b::AbstractVector)
ldlt!(S::SymTridiagonal{T, V}) where {T, V}
ldlt(M::SymTridiagonal{T, V} where V<:AbstractVector{T}; shift) where T
lmul!(A::LQ, B::AbstractVecOrMat)
lmul!(A::LinearAlgebra.LQPackedQ{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::LinearAlgebra.QRCompactWYQ{T, S, C} where C<:AbstractMatrix{T}, B::StridedVecOrMat{T}) where {T<:Union{Float32, Float64, ComplexF64, ComplexF32}, S<:(StridedMatrix{T} where T)}
lmul!(A::LinearAlgebra.QRPackedQ, B::AbstractVecOrMat)
lmul!(A::LinearAlgebra.QRPackedQ{T, S, C} where C<:AbstractVector{T}, B::StridedVecOrMat{T}) where {T<:Union{Float32, Float64, ComplexF64, ComplexF32}, S<:(StridedMatrix{T} where T)}
lmul!(A::LowerTriangular, B::AbstractVecOrMat)
lmul!(A::LowerTriangular, B::LowerTriangular)
lmul!(A::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{ComplexF64, ComplexF32}
lmul!(A::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{Float32, Float64}
lmul!(A::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{ComplexF64, ComplexF32}
lmul!(A::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{Float32, Float64}
lmul!(A::LowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::LowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::LowerTriangular{T, <:StridedMatrix{T} where T}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::LowerTriangular{T, <:StridedMatrix{T} where T}, b::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::Tridiagonal, B::LinearAlgebra.AbstractTriangular)
lmul!(A::UnitLowerTriangular, B::AbstractVecOrMat)
lmul!(A::UnitLowerTriangular, B::LowerTriangular)
lmul!(A::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{ComplexF64, ComplexF32}
lmul!(A::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{Float32, Float64}
lmul!(A::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{ComplexF64, ComplexF32}
lmul!(A::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{Float32, Float64}
lmul!(A::UnitLowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UnitLowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UnitLowerTriangular{T, <:StridedMatrix{T} where T}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UnitLowerTriangular{T, <:StridedMatrix{T} where T}, b::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UnitUpperTriangular, B::AbstractVecOrMat)
lmul!(A::UnitUpperTriangular, B::UpperTriangular)
lmul!(A::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{ComplexF64, ComplexF32}
lmul!(A::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{Float32, Float64}
lmul!(A::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{ComplexF64, ComplexF32}
lmul!(A::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{Float32, Float64}
lmul!(A::UnitUpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UnitUpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UnitUpperTriangular{T, <:StridedMatrix{T} where T}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UnitUpperTriangular{T, <:StridedMatrix{T} where T}, b::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UpperTriangular, B::AbstractVecOrMat)
lmul!(A::UpperTriangular, B::UpperTriangular)
lmul!(A::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{ComplexF64, ComplexF32}
lmul!(A::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{Float32, Float64}
lmul!(A::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{ComplexF64, ComplexF32}
lmul!(A::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{Float32, Float64}
lmul!(A::UpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}, b::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UpperTriangular{T, <:StridedMatrix{T} where T}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(A::UpperTriangular{T, <:StridedMatrix{T} where T}, b::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(D::Diagonal, A::LowerTriangular)
lmul!(D::Diagonal, A::UnitLowerTriangular)
lmul!(D::Diagonal, A::UnitUpperTriangular)
lmul!(D::Diagonal, A::UpperTriangular)
lmul!(D::Diagonal, B::AbstractVecOrMat)
lmul!(G::LinearAlgebra.Givens, A::AbstractVecOrMat)
lmul!(G::LinearAlgebra.Givens, R::LinearAlgebra.Rotation)
lmul!(J::UniformScaling, B::AbstractVecOrMat)
lmul!(Q::Adjoint{<:Any, <:LinearAlgebra.AbstractQ}, B::LinearAlgebra.AbstractTriangular)
lmul!(Q::Adjoint{<:Any, <:LinearAlgebra.QRPackedQ}, B::LinearAlgebra.AbstractTriangular)
lmul!(Q::LinearAlgebra.AbstractQ, B::LinearAlgebra.AbstractTriangular)
lmul!(Q::LinearAlgebra.HessenbergQ{T, <:StridedMatrix{T}, <:StridedVector{T}, false}, X::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(Q::LinearAlgebra.HessenbergQ{T, <:StridedMatrix{T}, <:StridedVector{T}, true}, X::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(Q::LinearAlgebra.HessenbergQ{T}, X::Adjoint{T, <:StridedVecOrMat{T}}) where T
lmul!(Q::LinearAlgebra.QRPackedQ, B::LinearAlgebra.AbstractTriangular)
lmul!(R::LinearAlgebra.Rotation, A::AbstractVecOrMat)
lmul!(adjA::Adjoint{<:Any, <:LinearAlgebra.LQPackedQ{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}}, B::StridedVecOrMat{T}) where T<:Union{ComplexF64, ComplexF32}
lmul!(adjA::Adjoint{<:Any, <:LinearAlgebra.LQPackedQ{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}}, B::StridedVecOrMat{T}) where T<:Union{Float32, Float64}
lmul!(adjA::Adjoint{<:Any, <:LinearAlgebra.QRCompactWYQ{T, S, C} where C<:AbstractMatrix{T}}, B::StridedVecOrMat{T}) where {T<:Union{ComplexF64, ComplexF32}, S<:(StridedMatrix{T} where T)}
lmul!(adjA::Adjoint{<:Any, <:LinearAlgebra.QRCompactWYQ{T, S, C} where C<:AbstractMatrix{T}}, B::StridedVecOrMat{T}) where {T<:Union{Float32, Float64}, S<:(StridedMatrix{T} where T)}
lmul!(adjA::Adjoint{<:Any, <:LinearAlgebra.QRPackedQ{T, S, C} where C<:AbstractVector{T}}, B::StridedVecOrMat{T}) where {T<:Union{ComplexF64, ComplexF32}, S<:(StridedMatrix{T} where T)}
lmul!(adjA::Adjoint{<:Any, <:LinearAlgebra.QRPackedQ{T, S, C} where C<:AbstractVector{T}}, B::StridedVecOrMat{T}) where {T<:Union{Float32, Float64}, S<:(StridedMatrix{T} where T)}
lmul!(adjA::Adjoint{<:Any, <:LinearAlgebra.QRPackedQ}, B::AbstractVecOrMat)
lmul!(adjQ::Adjoint{<:Any, <:LinearAlgebra.HessenbergQ{T, <:StridedMatrix{T}, <:StridedVector{T}, false}}, X::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(adjQ::Adjoint{<:Any, <:LinearAlgebra.HessenbergQ{T, <:StridedMatrix{T}, <:StridedVector{T}, true}}, X::StridedVecOrMat{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lmul!(adjQ::Adjoint{<:Any, <:LinearAlgebra.HessenbergQ{T}}, X::Adjoint{T, <:StridedVecOrMat{T}}) where T
lmul!(adjR::LinearAlgebra.AdjointRotation{<:Any, <:LinearAlgebra.Rotation}, A::AbstractVecOrMat)
lmul!(c::Number, A::Union{LowerTriangular, UpperTriangular})
lmul!(s::Number, X::AbstractArray)
lmul!(x::Number, H::UpperHessenberg)
lmul!(x::T, F::Hessenberg{<:Any, <:SymTridiagonal{T, V} where V<:AbstractVector{T}}) where T<:Number
lmul!(x::T, F::Hessenberg{<:Any, <:UpperHessenberg{T, S} where S<:AbstractMatrix{T}}) where T<:Number
logabsdet(A::AbstractMatrix)
logabsdet(A::Diagonal)
logabsdet(A::SymTridiagonal; shift)
logabsdet(A::Union{LowerTriangular{T, S} where S<:AbstractMatrix{T}, UpperTriangular{T, S} where S<:AbstractMatrix{T}}) where T
logabsdet(A::UnitLowerTriangular{T, S} where S<:AbstractMatrix{T}) where T
logabsdet(A::UnitUpperTriangular{T, S} where S<:AbstractMatrix{T}) where T
logabsdet(C::Union{Cholesky, CholeskyPivoted})
logabsdet(F::BunchKaufman)
logabsdet(F::Hessenberg)
logabsdet(F::LDLt{<:Any, <:SymTridiagonal})
logabsdet(F::LU{T, S} where S<:AbstractMatrix{T}) where T
logabsdet(F::UpperHessenberg; shift)
logabsdet(a::Number)
logdet(A)
logdet(A::AbstractMatrix)
logdet(A::UnitLowerTriangular{T, S} where S<:AbstractMatrix{T}) where T
logdet(A::UnitUpperTriangular{T, S} where S<:AbstractMatrix{T}) where T
logdet(C::Cholesky)
logdet(C::CholeskyPivoted)
logdet(D::Diagonal{var"#s972", V} where {var"#s972"<:Complex, V<:AbstractVector{var"#s972"}})
logdet(F::Factorization)
logdet(F::Hessenberg)
lowrankdowndate!(C::Cholesky, v::AbstractVector)
lowrankdowndate(C::Cholesky, v::AbstractVector)
lowrankupdate!(C::Cholesky, v::AbstractVector)
lowrankupdate(C::Cholesky, v::AbstractVector)
lq!(A::StridedMatrix{var"#s972"} where var"#s972"<:Union{Float32, Float64, ComplexF64, ComplexF32})
lq(A::AbstractMatrix{T}) where T
lq(x::Number)
lu!(A::AbstractMatrix)
lu!(A::AbstractMatrix, pivot::Union{NoPivot, RowMaximum, RowNonZero}; check)
lu!(A::StridedMatrix{T}, ::RowMaximum; check) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lu!(A::StridedMatrix{var"#s969"} where var"#s969"<:Union{Float32, Float64, ComplexF64, ComplexF32}; check)
lu!(A::Tridiagonal{T, V}) where {T, V}
lu!(A::Tridiagonal{T, V}, pivot::Union{NoPivot, RowMaximum}; check) where {T, V}
lu!(A::Union{Hermitian{T, S}, Symmetric{T, S}} where S) where T
lu!(A::Union{Hermitian{T, S}, Symmetric{T, S}} where S, pivot::Union{NoPivot, RowMaximum, RowNonZero}; check) where T
lu!(A::Union{Tridiagonal, Union{Hermitian{T, S}, Symmetric{T, S}} where {T, S}, StridedMatrix}, ::Val{false}; check)
lu!(A::Union{Tridiagonal, Union{Hermitian{T, S}, Symmetric{T, S}} where {T, S}, StridedMatrix}, ::Val{true}; check)
lu(A::AbstractMatrix, ::Val{false}; check)
lu(A::AbstractMatrix, ::Val{true}; check)
lu(A::AbstractMatrix{T}) where T
lu(A::AbstractMatrix{T}, pivot::Union{NoPivot, RowMaximum, RowNonZero}; check) where T
lu(S::LU)
lu(x::Number; check)
lyap(A::AbstractMatrix, C::AbstractMatrix)
lyap(A::AbstractMatrix{T}, C::AbstractMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
lyap(a::Union{Real, Complex}, c::Union{Real, Complex})
mul!(A::AbstractMatrix, B::SymTridiagonal, C::AbstractVecOrMat, alpha::Number, beta::Number)
mul!(A::AbstractVector, B::SymTridiagonal, C::AbstractVector, alpha::Number, beta::Number)
mul!(A::LowerTriangular, B::LowerTriangular, C::Number, alpha::Number, beta::Number)
mul!(A::LowerTriangular, B::Number, C::LowerTriangular, alpha::Number, beta::Number)
mul!(A::LowerTriangular, B::Number, C::UnitLowerTriangular, alpha::Number, beta::Number)
mul!(A::LowerTriangular, B::UnitLowerTriangular, C::Number, alpha::Number, beta::Number)
mul!(A::UpperTriangular, B::Number, C::UnitUpperTriangular, alpha::Number, beta::Number)
mul!(A::UpperTriangular, B::Number, C::UpperTriangular, alpha::Number, beta::Number)
mul!(A::UpperTriangular, B::UnitUpperTriangular, C::Number, alpha::Number, beta::Number)
mul!(A::UpperTriangular, B::UpperTriangular, C::Number, alpha::Number, beta::Number)
mul!(C, A, B)
mul!(C::AbstractArray, X::AbstractArray, s::Number, alpha::Number, beta::Number)
mul!(C::AbstractArray, s::Number, X::AbstractArray, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::AbstractMatrix, B::Union{Bidiagonal, SymTridiagonal, Tridiagonal}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::AbstractMatrix, J::UniformScaling, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::AbstractVecOrMat, B::AbstractVecOrMat, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::AbstractVecOrMat, adjB::Adjoint{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::AbstractVecOrMat, tB::Transpose{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::Adjoint{<:Any, <:AbstractVecOrMat}, B::Union{Bidiagonal, SymTridiagonal, Tridiagonal}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::Diagonal, B::Union{Bidiagonal, SymTridiagonal, Tridiagonal}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::LinearAlgebra.AbstractTriangular, B::AbstractVecOrMat)
mul!(C::AbstractMatrix, A::LinearAlgebra.AbstractTriangular, B::Adjoint{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::LinearAlgebra.AbstractTriangular, B::Transpose{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::LinearAlgebra.AbstractTriangular, adjB::Adjoint{<:Any, <:AbstractVecOrMat})
mul!(C::AbstractMatrix, A::LinearAlgebra.AbstractTriangular, transB::Transpose{<:Any, <:AbstractVecOrMat})
mul!(C::AbstractMatrix, A::SymTridiagonal, B::Adjoint{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::SymTridiagonal, B::Diagonal, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::SymTridiagonal, B::Transpose{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::SymTridiagonal, B::Union{Bidiagonal, SymTridiagonal, Tridiagonal}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::Transpose{<:Any, <:AbstractVecOrMat}, B::Union{Bidiagonal, SymTridiagonal, Tridiagonal}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::Union{Bidiagonal, Tridiagonal}, B::AbstractMatrix, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::Union{Bidiagonal, Tridiagonal}, B::Adjoint{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::Union{Bidiagonal, Tridiagonal}, B::Diagonal, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::Union{Bidiagonal, Tridiagonal}, B::Transpose{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, A::Union{Bidiagonal, Tridiagonal}, B::Union{Bidiagonal, SymTridiagonal, Tridiagonal}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, Da::Diagonal, Db::Diagonal, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, adjA::Adjoint{<:Any, <:AbstractVecOrMat}, B::AbstractVecOrMat, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, adjA::Adjoint{<:Any, <:AbstractVecOrMat}, adjB::Adjoint{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, adjA::Adjoint{<:Any, <:AbstractVecOrMat}, tB::Transpose{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, tA::Transpose{<:Any, <:AbstractVecOrMat}, B::AbstractVecOrMat, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, tA::Transpose{<:Any, <:AbstractVecOrMat}, tB::Adjoint{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractMatrix, tA::Transpose{<:Any, <:AbstractVecOrMat}, tB::Transpose{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractVecOrMat, A::LinearAlgebra.AbstractTriangular, B::AbstractVecOrMat)
mul!(C::AbstractVecOrMat, A::LinearAlgebra.AbstractTriangular, adjB::Adjoint{<:Any, <:AbstractVecOrMat})
mul!(C::AbstractVecOrMat, J::UniformScaling, B::AbstractVecOrMat, alpha::Number, beta::Number)
mul!(C::AbstractVector, A::AbstractVecOrMat, tB::Transpose{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(C::AbstractVector, A::LinearAlgebra.AbstractTriangular, B::AbstractVector)
mul!(C::AbstractVector, A::LinearAlgebra.AbstractTriangular, transB::Transpose{<:Any, <:AbstractVecOrMat})
mul!(C::AbstractVector, A::Union{Bidiagonal, Tridiagonal}, B::AbstractVector, alpha::Number, beta::Number)
mul!(C::Diagonal, Da::Diagonal, Db::Diagonal, alpha::Number, beta::Number)
mul!(C::LowerTriangular, A::LowerTriangular, B::LowerTriangular)
mul!(C::LowerTriangular, A::LowerTriangular, B::LowerTriangular, alpha::Number, beta::Number)
mul!(C::LowerTriangular, A::LowerTriangular, B::UnitLowerTriangular)
mul!(C::LowerTriangular, A::LowerTriangular, B::UnitLowerTriangular, alpha::Number, beta::Number)
mul!(C::LowerTriangular, A::LowerTriangular, D::Diagonal, α::Number, β::Number)
mul!(C::LowerTriangular, A::Union{LowerTriangular, UnitLowerTriangular}, D::Diagonal)
mul!(C::LowerTriangular, A::UnitLowerTriangular, B::LowerTriangular)
mul!(C::LowerTriangular, A::UnitLowerTriangular, B::LowerTriangular, alpha::Number, beta::Number)
mul!(C::LowerTriangular, A::UnitLowerTriangular, D::Diagonal, α::Number, β::Number)
mul!(C::LowerTriangular, D::Diagonal, A::LowerTriangular, α::Number, β::Number)
mul!(C::LowerTriangular, D::Diagonal, A::UnitLowerTriangular, α::Number, β::Number)
mul!(C::StridedMatrix{T}, A::Hermitian{T, <:StridedMatrix{T} where T}, B::StridedMatrix{T}, α::Number, β::Number) where T<:Union{ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, A::Hermitian{T, <:StridedMatrix{T} where T}, B::StridedMatrix{T}, α::Number, β::Number) where T<:Union{Float32, Float64}
mul!(C::StridedMatrix{T}, A::StridedMatrix{T}, B::Hermitian{T, <:StridedMatrix{T} where T}, α::Number, β::Number) where T<:Union{ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, A::StridedMatrix{T}, B::Hermitian{T, <:StridedMatrix{T} where T}, α::Number, β::Number) where T<:Union{Float32, Float64}
mul!(C::StridedMatrix{T}, A::StridedMatrix{T}, B::Symmetric{T, <:StridedMatrix{T} where T}, α::Number, β::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, A::StridedVecOrMat{T}, B::StridedVecOrMat{T}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, A::StridedVecOrMat{T}, adjB::Adjoint{<:Any, <:StridedVecOrMat{<:Union{Float32, Float64}}}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, A::StridedVecOrMat{T}, adjB::Adjoint{<:Any, <:StridedVecOrMat{T}}, alpha::Number, beta::Number) where T<:Union{ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, A::StridedVecOrMat{T}, tB::Transpose{<:Any, <:StridedVecOrMat{T}}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, A::Symmetric{T, <:StridedMatrix{T} where T}, B::StridedMatrix{T}, α::Number, β::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, adjA::Adjoint{<:Any, <:StridedVecOrMat{T}}, B::StridedVecOrMat{T}, alpha::Number, beta::Number) where T<:Union{ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, adjA::Adjoint{<:Any, <:StridedVecOrMat{T}}, B::StridedVecOrMat{T}, alpha::Real, beta::Real) where T<:Union{Float32, Float64}
mul!(C::StridedMatrix{T}, adjA::Adjoint{<:Any, <:StridedVecOrMat{T}}, adjB::Adjoint{<:Any, <:StridedVecOrMat{T}}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, adjA::Adjoint{<:Any, <:StridedVecOrMat{T}}, tB::Transpose{<:Any, <:StridedVecOrMat{T}}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, tA::Transpose{<:Any, <:StridedVecOrMat{T}}, B::StridedVecOrMat{T}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, tA::Transpose{<:Any, <:StridedVecOrMat{T}}, adjB::Adjoint{<:Any, <:StridedVecOrMat{T}}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedMatrix{T}, tA::Transpose{<:Any, <:StridedVecOrMat{T}}, tB::Transpose{<:Any, <:StridedVecOrMat{T}}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(C::StridedVecOrMat{T}, A::StridedVecOrMat{T}, Q::LinearAlgebra.AbstractQ{T}) where T
mul!(C::StridedVecOrMat{T}, A::StridedVecOrMat{T}, adjQ::Adjoint{<:Any, <:LinearAlgebra.AbstractQ{T}}) where T
mul!(C::StridedVecOrMat{T}, Q::LinearAlgebra.AbstractQ{T}, B::StridedVecOrMat{T}) where T
mul!(C::StridedVecOrMat{T}, adjQ::Adjoint{<:Any, <:LinearAlgebra.AbstractQ{T}}, B::StridedVecOrMat{T}) where T
mul!(C::Union{DenseArray{Complex{T}, 2}, Base.ReinterpretArray{Complex{T}, 2, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{Complex{T}, 2, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, SubArray{Complex{T}, 2, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}}, A::Union{DenseArray{Complex{T}, 1}, DenseArray{Complex{T}, 2}, Base.ReinterpretArray{Complex{T}, 1, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReinterpretArray{Complex{T}, 2, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{Complex{T}, 1, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, Base.ReshapedArray{Complex{T}, 2, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, SubArray{Complex{T}, 1, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}, SubArray{Complex{T}, 2, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}}, B::StridedVecOrMat{T}, alpha::Number, beta::Number) where T<:Union{Float32, Float64}
mul!(C::Union{DenseArray{Complex{T}, 2}, Base.ReinterpretArray{Complex{T}, 2, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{Complex{T}, 2, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, SubArray{Complex{T}, 2, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}}, A::Union{DenseArray{Complex{T}, 1}, DenseArray{Complex{T}, 2}, Base.ReinterpretArray{Complex{T}, 1, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReinterpretArray{Complex{T}, 2, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{Complex{T}, 1, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, Base.ReshapedArray{Complex{T}, 2, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, SubArray{Complex{T}, 1, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}, SubArray{Complex{T}, 2, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}}, tB::Transpose{<:Any, <:StridedVecOrMat{T}}, alpha::Number, beta::Number) where T<:Union{Float32, Float64}
mul!(C::UnitLowerTriangular, A::UnitLowerTriangular, B::UnitLowerTriangular)
mul!(C::UnitLowerTriangular, A::UnitLowerTriangular, B::UnitLowerTriangular, alpha::Number, beta::Number)
mul!(C::UnitUpperTriangular, A::UnitUpperTriangular, B::UnitUpperTriangular)
mul!(C::UnitUpperTriangular, A::UnitUpperTriangular, B::UnitUpperTriangular, alpha::Number, beta::Number)
mul!(C::UpperTriangular, A::Union{UnitUpperTriangular, UpperTriangular}, D::Diagonal)
mul!(C::UpperTriangular, A::UnitUpperTriangular, B::UpperTriangular)
mul!(C::UpperTriangular, A::UnitUpperTriangular, B::UpperTriangular, alpha::Number, beta::Number)
mul!(C::UpperTriangular, A::UnitUpperTriangular, D::Diagonal, α::Number, β::Number)
mul!(C::UpperTriangular, A::UpperTriangular, B::UnitUpperTriangular)
mul!(C::UpperTriangular, A::UpperTriangular, B::UnitUpperTriangular, alpha::Number, beta::Number)
mul!(C::UpperTriangular, A::UpperTriangular, B::UpperTriangular)
mul!(C::UpperTriangular, A::UpperTriangular, B::UpperTriangular, alpha::Number, beta::Number)
mul!(C::UpperTriangular, A::UpperTriangular, D::Diagonal, α::Number, β::Number)
mul!(C::UpperTriangular, D::Diagonal, A::UnitUpperTriangular, α::Number, β::Number)
mul!(C::UpperTriangular, D::Diagonal, A::UpperTriangular, α::Number, β::Number)
mul!(out::AbstractMatrix, A::AbstractMatrix, D::Diagonal, alpha::Number, beta::Number)
mul!(out::AbstractMatrix, A::Adjoint{<:Any, <:AbstractVecOrMat}, D::Diagonal, alpha::Number, beta::Number)
mul!(out::AbstractMatrix, A::Transpose{<:Any, <:AbstractVecOrMat}, D::Diagonal, alpha::Number, beta::Number)
mul!(out::AbstractMatrix, A::UniformScaling, b::Number, α::Number, β::Number)
mul!(out::AbstractMatrix, D::Diagonal, B::AbstractMatrix, alpha::Number, beta::Number)
mul!(out::AbstractMatrix, D::Diagonal, B::Adjoint{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(out::AbstractMatrix, D::Diagonal, B::Transpose{<:Any, <:AbstractVecOrMat}, alpha::Number, beta::Number)
mul!(out::AbstractMatrix{T}, a::Number, B::UniformScaling, α::Number, β::Number) where T
mul!(out::AbstractVector, D::Diagonal, V::AbstractVector, alpha::Number, beta::Number)
mul!(y::AbstractVector, A::AbstractVecOrMat, x::AbstractVector, alpha::Number, beta::Number)
mul!(y::AbstractVector, adjA::Adjoint{<:Any, <:AbstractVecOrMat}, x::AbstractVector, alpha::Number, beta::Number)
mul!(y::AbstractVector, tA::Transpose{<:Any, <:AbstractVecOrMat}, x::AbstractVector, alpha::Number, beta::Number)
mul!(y::StridedVector{T}, A::Hermitian{T, <:StridedMatrix{T} where T}, x::StridedVector{T}, α::Number, β::Number) where T<:Union{ComplexF64, ComplexF32}
mul!(y::StridedVector{T}, A::Hermitian{T, <:StridedMatrix{T} where T}, x::StridedVector{T}, α::Number, β::Number) where T<:Union{Float32, Float64}
mul!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(y::StridedVector{T}, A::Symmetric{T, <:StridedMatrix{T} where T}, x::StridedVector{T}, α::Number, β::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(y::StridedVector{T}, adjA::Adjoint{<:Any, <:StridedVecOrMat{T}}, x::StridedVector{T}, alpha::Number, beta::Number) where T<:Union{ComplexF64, ComplexF32}
mul!(y::StridedVector{T}, adjA::Adjoint{<:Any, <:StridedVecOrMat{T}}, x::StridedVector{T}, alpha::Number, beta::Number) where T<:Union{Float32, Float64}
mul!(y::StridedVector{T}, tA::Transpose{<:Any, <:StridedVecOrMat{T}}, x::StridedVector{T}, alpha::Number, beta::Number) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
mul!(y::Union{DenseArray{Complex{T}, 1}, Base.ReinterpretArray{Complex{T}, 1, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{Complex{T}, 1, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, SubArray{Complex{T}, 1, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}}, A::Union{Adjoint{T, <:StridedMatrix{T} where T}, Transpose{T, <:StridedMatrix{T} where T}, StridedMatrix{T}}, x::Union{DenseArray{Complex{T}, 1}, Base.ReinterpretArray{Complex{T}, 1, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{Complex{T}, 1, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, SubArray{Complex{T}, 1, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}}, alpha::Number, beta::Number) where T<:Union{Float32, Float64}
mul!(y::Union{DenseArray{Complex{T}, 1}, Base.ReinterpretArray{Complex{T}, 1, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{Complex{T}, 1, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, SubArray{Complex{T}, 1, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}}, A::Union{DenseArray{Complex{T}, 1}, DenseArray{Complex{T}, 2}, Base.ReinterpretArray{Complex{T}, 1, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReinterpretArray{Complex{T}, 2, S, A, IsReshaped} where {A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{Complex{T}, 1, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, Base.ReshapedArray{Complex{T}, 2, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, SubArray{Complex{T}, 1, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}, SubArray{Complex{T}, 2, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}, IsReshaped, S}, SubArray{T, N, A, I, true} where {T, N, A<:DenseArray, I<:Union{Tuple{Vararg{Real}}, Tuple{AbstractUnitRange, Vararg{Any}}}}, DenseArray}}, DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:AbstractUnitRange}, Union{AbstractRange{<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}, var"#s92"} where var"#s92"<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}}}}}}, x::StridedVector{T}, alpha::Number, beta::Number) where T<:Union{Float32, Float64}
norm(::Missing)
norm(::Missing, p::Real)
norm(itr)
norm(itr, p::Real)
norm(v::Union{Adjoint{T, <:AbstractVector} where T, Transpose{T, <:AbstractVector} where T}, p::Real)
norm(x::Number)
norm(x::Number, p::Real)
norm(x::StridedVector{T}, rx::Union{AbstractRange{TI}, UnitRange{TI}}) where {T<:Union{Float32, Float64, ComplexF64, ComplexF32}, TI<:Integer}
normalize!(a::AbstractArray)
normalize!(a::AbstractArray, p::Real)
normalize(a::AbstractArray)
normalize(a::AbstractArray, p::Real)
normalize(x)
normalize(x, p::Real)
nullspace(A::AbstractMatrix, tol::Real)
nullspace(A::AbstractVecOrMat; atol, rtol)
nullspace(A::AbstractVector, tol::Real)
opnorm(A::AbstractMatrix)
opnorm(A::AbstractMatrix, p::Real)
opnorm(J::UniformScaling)
opnorm(J::UniformScaling, p::Real)
opnorm(v::Adjoint{T, <:AbstractVector} where T)
opnorm(v::Adjoint{T, <:AbstractVector} where T, q::Real)
opnorm(v::Transpose{T, <:AbstractVector} where T)
opnorm(v::Transpose{T, <:AbstractVector} where T, q::Real)
opnorm(x::Number)
opnorm(x::Number, p::Real)
ordschur!(gschur::GeneralizedSchur, select::Union{BitVector, Vector{Bool}})
ordschur!(schur::Schur, select::Union{BitVector, Vector{Bool}})
ordschur(gschur::GeneralizedSchur, select::Union{BitVector, Vector{Bool}})
ordschur(schur::Schur, select::Union{BitVector, Vector{Bool}})
pinv(A::AbstractMatrix{T}, tol::Real) where T
pinv(A::AbstractMatrix{T}; atol, rtol) where T
pinv(D::Diagonal{T, V} where V<:AbstractVector{T}) where T
pinv(D::Diagonal{T, V} where V<:AbstractVector{T}, tol::Real) where T
pinv(J::UniformScaling)
pinv(v::AbstractVector{T}) where T
pinv(v::AbstractVector{T}) where T<:Complex
pinv(v::AbstractVector{T}) where T<:Real
pinv(v::AbstractVector{T}, tol::Real) where T
pinv(v::AbstractVector{T}, tol::Real) where T<:Complex
pinv(v::AbstractVector{T}, tol::Real) where T<:Real
pinv(v::Adjoint{T, <:AbstractVector} where T)
pinv(v::Adjoint{T, <:AbstractVector} where T, tol::Real)
pinv(v::Transpose{T, <:AbstractVector} where T)
pinv(v::Transpose{T, <:AbstractVector} where T, tol::Real)
pinv(x::Number)
qr!(A::AbstractMatrix)
qr!(A::AbstractMatrix, ::ColumnNorm)
qr!(A::AbstractMatrix, ::NoPivot)
qr!(A::AbstractMatrix, ::Val{false})
qr!(A::AbstractMatrix, ::Val{true})
qr!(A::StridedMatrix{var"#s968"} where var"#s968"<:Union{Float32, Float64, ComplexF64, ComplexF32}, ::NoPivot; blocksize)
qr!(A::StridedMatrix{var"#s972"} where var"#s972"<:Union{Float32, Float64, ComplexF64, ComplexF32}, ::ColumnNorm)
qr(A::AbstractMatrix, ::Val{false}; kwargs...)
qr(A::AbstractMatrix, ::Val{true}; kwargs...)
qr(A::AbstractMatrix{T}, arg...; kwargs...) where T
qr(A::BitMatrix)
qr(v::AbstractVector)
qr(x::Number)
rank(A::AbstractMatrix, tol::Real)
rank(A::AbstractMatrix; atol, rtol)
rank(C::CholeskyPivoted)
rank(x::Union{Number, AbstractVector})
rdiv!(A::AbstractMatrix, B::Adjoint{<:Any, <:Bidiagonal})
rdiv!(A::AbstractMatrix, B::Bidiagonal)
rdiv!(A::AbstractMatrix, B::LowerTriangular)
rdiv!(A::AbstractMatrix, B::Transpose{<:Any, <:Bidiagonal})
rdiv!(A::AbstractMatrix, B::UnitLowerTriangular)
rdiv!(A::AbstractMatrix, B::UnitUpperTriangular)
rdiv!(A::AbstractMatrix, B::UpperTriangular)
rdiv!(A::AbstractMatrix, J::UniformScaling)
rdiv!(A::AbstractVecOrMat, B::LU)
rdiv!(A::AbstractVecOrMat, D::Diagonal)
rdiv!(A::LowerTriangular, B::LowerTriangular)
rdiv!(A::LowerTriangular, B::UnitLowerTriangular)
rdiv!(A::LowerTriangular, D::Diagonal)
rdiv!(A::StridedMatrix{T}, B::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64}
rdiv!(A::StridedMatrix{T}, B::LowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::LowerTriangular{T, <:StridedMatrix{T} where T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64}
rdiv!(A::StridedMatrix{T}, B::UnitLowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::UnitLowerTriangular{T, <:StridedMatrix{T} where T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64}
rdiv!(A::StridedMatrix{T}, B::UnitUpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::UnitUpperTriangular{T, <:StridedMatrix{T} where T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64}
rdiv!(A::StridedMatrix{T}, B::UpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rdiv!(A::StridedMatrix{T}, B::UpperTriangular{T, <:StridedMatrix{T} where T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rdiv!(A::UnitLowerTriangular, D::Diagonal)
rdiv!(A::UnitUpperTriangular, D::Diagonal)
rdiv!(A::UpperTriangular, B::UnitUpperTriangular)
rdiv!(A::UpperTriangular, B::UpperTriangular)
rdiv!(A::UpperTriangular, D::Diagonal)
rdiv!(B::AbstractMatrix, A::Adjoint{<:Any, <:LU})
rdiv!(B::AbstractMatrix, A::LU)
rdiv!(B::AbstractMatrix, A::Transpose{<:Any, <:LU})
rdiv!(B::AbstractMatrix, C::Cholesky)
rdiv!(B::AbstractMatrix, C::CholeskyPivoted)
rdiv!(B::AbstractMatrix, F::Adjoint{<:Any, <:Hessenberg})
rdiv!(B::AbstractMatrix, F::Hessenberg)
rdiv!(B::AbstractMatrix, F::UpperHessenberg; shift)
rdiv!(B::AbstractVecOrMat, A::SymTridiagonal; shift)
rdiv!(B::AbstractVecOrMat, S::LDLt{<:Any, <:SymTridiagonal})
rdiv!(B::AbstractVecOrMat{<:Complex}, F::Hessenberg{<:Complex, <:Any, <:AbstractMatrix{<:Real}})
rdiv!(X::AbstractArray, s::Number)
reflect!(x::AbstractVector, y::AbstractVector, c, s)
rmul!(A::AbstractMatrix, B::LowerTriangular)
rmul!(A::AbstractMatrix, B::UnitLowerTriangular)
rmul!(A::AbstractMatrix, B::UnitUpperTriangular)
rmul!(A::AbstractMatrix, B::UpperTriangular)
rmul!(A::AbstractMatrix, D::Diagonal)
rmul!(A::AbstractMatrix, G::LinearAlgebra.Givens)
rmul!(A::AbstractMatrix, J::UniformScaling)
rmul!(A::AbstractMatrix, R::LinearAlgebra.Rotation)
rmul!(A::AbstractMatrix, adjR::LinearAlgebra.AdjointRotation{<:Any, <:LinearAlgebra.Rotation})
rmul!(A::LinearAlgebra.AbstractTriangular, Q::Adjoint{<:Any, <:LinearAlgebra.AbstractQ})
rmul!(A::LinearAlgebra.AbstractTriangular, Q::LinearAlgebra.AbstractQ)
rmul!(A::LowerTriangular, B::LowerTriangular)
rmul!(A::LowerTriangular, B::UnitLowerTriangular)
rmul!(A::LowerTriangular, D::Diagonal)
rmul!(A::StridedMatrix{T} where T, Q::LinearAlgebra.QRPackedQ)
rmul!(A::StridedMatrix{T} where T, adjQ::Adjoint{<:Any, <:LinearAlgebra.QRPackedQ})
rmul!(A::StridedMatrix{T}, B::LinearAlgebra.LQPackedQ{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::LowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64}
rmul!(A::StridedMatrix{T}, B::LowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::LowerTriangular{T, <:StridedMatrix{T} where T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::UnitLowerTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64}
rmul!(A::StridedMatrix{T}, B::UnitLowerTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::UnitLowerTriangular{T, <:StridedMatrix{T} where T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::UnitUpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64}
rmul!(A::StridedMatrix{T}, B::UnitUpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::UnitUpperTriangular{T, <:StridedMatrix{T} where T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::UpperTriangular{<:Any, <:Adjoint{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64}
rmul!(A::StridedMatrix{T}, B::UpperTriangular{<:Any, <:Transpose{T, <:StridedMatrix{T} where T}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, B::UpperTriangular{T, <:StridedMatrix{T} where T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, adjB::Adjoint{<:Any, <:LinearAlgebra.LQPackedQ{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}}) where T<:Union{ComplexF64, ComplexF32}
rmul!(A::StridedMatrix{T}, adjB::Adjoint{<:Any, <:LinearAlgebra.LQPackedQ{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}}) where T<:Union{Float32, Float64}
rmul!(A::StridedVecOrMat{T}, B::LinearAlgebra.QRCompactWYQ{T, S, C} where C<:AbstractMatrix{T}) where {T<:Union{Float32, Float64, ComplexF64, ComplexF32}, S<:(StridedMatrix{T} where T)}
rmul!(A::StridedVecOrMat{T}, B::LinearAlgebra.QRPackedQ{T, S, C} where C<:AbstractVector{T}) where {T<:Union{Float32, Float64, ComplexF64, ComplexF32}, S<:(StridedMatrix{T} where T)}
rmul!(A::StridedVecOrMat{T}, adjB::Adjoint{<:Any, <:LinearAlgebra.QRCompactWYQ{T, M, C} where {M<:AbstractMatrix{T}, C<:AbstractMatrix{T}}}) where T<:Union{ComplexF64, ComplexF32}
rmul!(A::StridedVecOrMat{T}, adjB::Adjoint{<:Any, <:LinearAlgebra.QRCompactWYQ{T, M, C} where {M<:AbstractMatrix{T}, C<:AbstractMatrix{T}}}) where T<:Union{Float32, Float64}
rmul!(A::StridedVecOrMat{T}, adjB::Adjoint{<:Any, <:LinearAlgebra.QRPackedQ{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}}) where T<:Union{ComplexF64, ComplexF32}
rmul!(A::StridedVecOrMat{T}, adjB::Adjoint{<:Any, <:LinearAlgebra.QRPackedQ{T, S, C} where {S<:AbstractMatrix{T}, C<:AbstractVector{T}}}) where T<:Union{Float32, Float64}
rmul!(A::Union{LowerTriangular, UpperTriangular}, c::Number)
rmul!(A::UnitLowerTriangular, D::Diagonal)
rmul!(A::UnitUpperTriangular, D::Diagonal)
rmul!(A::UpperTriangular, B::UnitUpperTriangular)
rmul!(A::UpperTriangular, B::UpperTriangular)
rmul!(A::UpperTriangular, D::Diagonal)
rmul!(F::Hessenberg{<:Any, <:SymTridiagonal{T, V} where V<:AbstractVector{T}}, x::T) where T<:Number
rmul!(F::Hessenberg{<:Any, <:UpperHessenberg{T, S} where S<:AbstractMatrix{T}}, x::T) where T<:Number
rmul!(H::UpperHessenberg, x::Number)
rmul!(R::LinearAlgebra.Rotation, G::LinearAlgebra.Givens)
rmul!(X::AbstractArray, s::Number)
rmul!(X::Adjoint{T, <:StridedVecOrMat{T}}, Q::LinearAlgebra.HessenbergQ{T}) where T
rmul!(X::Adjoint{T, <:StridedVecOrMat{T}}, adjQ::Adjoint{<:Any, <:LinearAlgebra.HessenbergQ{T}}) where T
rmul!(X::StridedVecOrMat{T}, Q::LinearAlgebra.HessenbergQ{T, <:StridedMatrix{T}, <:StridedVector{T}, false}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(X::StridedVecOrMat{T}, Q::LinearAlgebra.HessenbergQ{T, <:StridedMatrix{T}, <:StridedVector{T}, true}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(X::StridedVecOrMat{T}, adjQ::Adjoint{<:Any, <:LinearAlgebra.HessenbergQ{T, <:StridedMatrix{T}, <:StridedVector{T}, false}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rmul!(X::StridedVecOrMat{T}, adjQ::Adjoint{<:Any, <:LinearAlgebra.HessenbergQ{T, <:StridedMatrix{T}, <:StridedVector{T}, true}}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
rotate!(x::AbstractVector, y::AbstractVector, c, s)
schur!(A::StridedMatrix{T}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
schur!(A::StridedMatrix{var"#s972"} where var"#s972"<:Union{Float32, Float64, ComplexF64, ComplexF32})
schur(A::AbstractMatrix{TA}, B::AbstractMatrix{TB}) where {TA, TB}
schur(A::AbstractMatrix{T}) where T
schur(A::Bidiagonal{T, V} where V<:AbstractVector{T}) where T
schur(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S})
schur(A::Union{LowerTriangular{T, S} where S<:AbstractMatrix{T}, UnitLowerTriangular{T, S} where S<:AbstractMatrix{T}}) where T
schur(A::Union{UnitUpperTriangular{T, S} where S<:AbstractMatrix{T}, UpperTriangular{T, S} where S<:AbstractMatrix{T}}) where T
svd!(A::LinearAlgebra.AbstractTriangular; kwargs...)
svd!(A::StridedMatrix{T}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
svd!(A::StridedMatrix{T}; full, alg) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
svd!(A::StridedVector{T}; full, alg) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
svd!(M::Bidiagonal{var"#s968", V} where {var"#s968"<:Union{Float32, Float64}, V<:AbstractVector{var"#s968"}}; full)
svd(A::AbstractMatrix{TA}, B::AbstractMatrix{TB}) where {TA, TB}
svd(A::AbstractMatrix{T}, B::AbstractMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
svd(A::AbstractVecOrMat{T}; full, alg) where T
svd(A::AbstractVecOrMat{T}; full, alg) where T<:Union{Float16, ComplexF16}
svd(A::Adjoint; full, alg)
svd(A::BitMatrix)
svd(A::LinearAlgebra.AbstractTriangular; kwargs...)
svd(A::Transpose; full, alg)
svd(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S}; full)
svd(D::Diagonal{T, V} where V<:AbstractVector{T}) where T<:Number
svd(M::Bidiagonal; kw...)
svd(x::Integer; full, alg)
svd(x::Number, y::Number)
svd(x::Number; full, alg)
svdvals!(A::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
svdvals!(A::StridedMatrix{T}, B::StridedMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
svdvals!(A::StridedVector{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
svdvals!(A::SymTridiagonal)
svdvals!(A::Union{Hermitian{T, S}, Hermitian{Complex{T}, S}, Symmetric{T, S}} where {T<:Real, S})
svdvals!(M::Bidiagonal{var"#s972", V} where {var"#s972"<:Union{Float32, Float64}, V<:AbstractVector{var"#s972"}})
svdvals(A::AbstractMatrix{TA}, B::AbstractMatrix{TB}) where {TA, TB}
svdvals(A::AbstractMatrix{T}) where T
svdvals(A::AbstractVector{T}) where T
svdvals(A::LinearAlgebra.AbstractTriangular; kwargs...)
svdvals(D::Diagonal)
svdvals(D::Diagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}})
svdvals(S::SVD{var"#s972", T, M, C} where {var"#s972", M<:(AbstractArray{var"#s972"}), C<:AbstractVector{T}}) where T
svdvals(x::Number)
svdvals(x::Number, y::Number)
sylvester(A::AbstractMatrix, B::AbstractMatrix, C::AbstractMatrix)
sylvester(A::AbstractMatrix{T}, B::AbstractMatrix{T}, C::AbstractMatrix{T}) where T<:Union{Float32, Float64, ComplexF64, ComplexF32}
sylvester(a::Union{Real, Complex}, b::Union{Real, Complex}, c::Union{Real, Complex})
tr(A::AbstractMatrix)
tr(A::Hermitian)
tr(A::Matrix{T}) where T
tr(D::Diagonal)
tr(J::UniformScaling{T}) where T
tr(x::Number)
transpose!(A::LowerTriangular)
transpose!(A::UnitLowerTriangular)
transpose!(A::UnitUpperTriangular)
transpose!(A::UpperTriangular)
transpose!(B::AbstractMatrix, A::AbstractMatrix)
transpose!(B::AbstractMatrix, A::AbstractVector)
transpose!(B::AbstractVector, A::AbstractMatrix)
transpose!(C::BitMatrix, B::BitMatrix)
transpose(A::AbstractVecOrMat)
transpose(A::Adjoint{<:Real})
transpose(A::Hermitian)
transpose(A::Hermitian{var"#s972", S} where {var"#s972"<:Real, S<:(AbstractMatrix{<:var"#s972"})})
transpose(A::LowerTriangular)
transpose(A::Symmetric)
transpose(A::Transpose)
transpose(A::UnitLowerTriangular)
transpose(A::UnitUpperTriangular)
transpose(A::UpperTriangular)
transpose(B::Bidiagonal)
transpose(B::Bidiagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}})
transpose(B::Union{BitVector, BitMatrix})
transpose(D::Diagonal)
transpose(D::Diagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}})
transpose(F::LU)
transpose(J::UniformScaling)
transpose(Q::LinearAlgebra.AbstractQ{<:Real})
transpose(R::LinearAlgebra.AbstractRotation)
transpose(S::SymTridiagonal)
transpose(S::Tridiagonal)
transpose(S::Tridiagonal{var"#s972", V} where {var"#s972"<:Number, V<:AbstractVector{var"#s972"}})
transpose(a::AbstractArray)
tril!(A::LowerTriangular)
tril!(A::LowerTriangular, k::Integer)
tril!(A::UnitLowerTriangular)
tril!(A::UnitLowerTriangular, k::Integer)
tril!(A::UnitUpperTriangular{T, S} where S<:AbstractMatrix{T}) where T
tril!(A::UnitUpperTriangular{T, S} where S<:AbstractMatrix{T}, k::Integer) where T
tril!(A::UpperTriangular)
tril!(A::UpperTriangular, k::Integer)
tril!(D::Diagonal{T, V} where V<:AbstractVector{T}) where T
tril!(D::Diagonal{T, V} where V<:AbstractVector{T}, k::Integer) where T
tril!(M::AbstractMatrix)
tril!(M::AbstractMatrix, k::Integer)
tril!(M::Bidiagonal{T, V} where V<:AbstractVector{T}) where T
tril!(M::Bidiagonal{T, V} where V<:AbstractVector{T}, k::Integer) where T
tril!(M::SymTridiagonal{T, V} where V<:AbstractVector{T}) where T
tril!(M::SymTridiagonal{T, V} where V<:AbstractVector{T}, k::Integer) where T
tril!(M::Tridiagonal{T, V} where V<:AbstractVector{T}) where T
tril!(M::Tridiagonal{T, V} where V<:AbstractVector{T}, k::Integer) where T
tril(A::Hermitian)
tril(A::Hermitian, k::Integer)
tril(A::Symmetric)
tril(A::Symmetric, k::Integer)
tril(B::BitMatrix)
tril(B::BitMatrix, k::Integer)
tril(M::AbstractMatrix)
tril(M::AbstractMatrix, k::Integer)
tril(M::Matrix, k::Integer)
triu!(A::LowerTriangular)
triu!(A::LowerTriangular, k::Integer)
triu!(A::UnitLowerTriangular{T, S} where S<:AbstractMatrix{T}) where T
triu!(A::UnitLowerTriangular{T, S} where S<:AbstractMatrix{T}, k::Integer) where T
triu!(A::UnitUpperTriangular)
triu!(A::UnitUpperTriangular, k::Integer)
triu!(A::UpperTriangular)
triu!(A::UpperTriangular, k::Integer)
triu!(D::Diagonal{T, V} where V<:AbstractVector{T}) where T
triu!(D::Diagonal{T, V} where V<:AbstractVector{T}, k::Integer) where T
triu!(M::AbstractMatrix)
triu!(M::AbstractMatrix, k::Integer)
triu!(M::Bidiagonal{T, V} where V<:AbstractVector{T}) where T
triu!(M::Bidiagonal{T, V} where V<:AbstractVector{T}, k::Integer) where T
triu!(M::SymTridiagonal{T, V} where V<:AbstractVector{T}) where T
triu!(M::SymTridiagonal{T, V} where V<:AbstractVector{T}, k::Integer) where T
triu!(M::Tridiagonal{T, V} where V<:AbstractVector{T}) where T
triu!(M::Tridiagonal{T, V} where V<:AbstractVector{T}, k::Integer) where T
triu(A::Hermitian)
triu(A::Hermitian, k::Integer)
triu(A::Symmetric)
triu(A::Symmetric, k::Integer)
triu(B::BitMatrix)
triu(B::BitMatrix, k::Integer)
triu(M::AbstractMatrix)
triu(M::AbstractMatrix, k::Integer)
triu(M::Matrix, k::Integer)
